// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct URIRequest(Object<ffi::WebKitURIRequest>);

    match fn {
        get_type => || ffi::webkit_uri_request_get_type(),
    }
}

impl URIRequest {
    pub fn new(uri: &str) -> URIRequest {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_uri_request_new(uri.to_glib_none().0))
        }
    }
}

pub trait URIRequestExt {
    //fn get_http_headers(&self) -> /*Ignored*/Option<soup::MessageHeaders>;

    fn get_http_method(&self) -> Option<String>;

    fn get_uri(&self) -> Option<String>;

    fn set_uri(&self, uri: &str);
}

impl<O: IsA<URIRequest>> URIRequestExt for O {
    //fn get_http_headers(&self) -> /*Ignored*/Option<soup::MessageHeaders> {
    //    unsafe { TODO: call ffi::webkit_uri_request_get_http_headers() }
    //}

    fn get_http_method(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_request_get_http_method(self.to_glib_none().0))
        }
    }

    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_request_get_uri(self.to_glib_none().0))
        }
    }

    fn set_uri(&self, uri: &str) {
        unsafe {
            ffi::webkit_uri_request_set_uri(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }
}
