// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMNode;
use DOMObject;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use DOMRange;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use Error;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMDOMSelection(Object<ffi::WebKitDOMDOMSelection, ffi::WebKitDOMDOMSelectionClass>): DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_dom_selection_get_type(),
    }
}

pub trait DOMDOMSelectionExt {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn add_range(&self, range: &DOMRange);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse_to_end(&self) -> Result<(), Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse_to_start(&self) -> Result<(), Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn contains_node<P: IsA<DOMNode>>(&self, node: &P, allowPartial: bool) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn delete_from_document(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn empty(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn extend<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong) -> Result<(), Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_anchor_node(&self) -> Option<DOMNode>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_anchor_offset(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_base_node(&self) -> Option<DOMNode>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_base_offset(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_extent_node(&self) -> Option<DOMNode>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_extent_offset(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_focus_node(&self) -> Option<DOMNode>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_focus_offset(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_is_collapsed(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_range_at(&self, index: libc::c_ulong) -> Result<DOMRange, Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_range_count(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_selection_type(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn modify(&self, alter: &str, direction: &str, granularity: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove_all_ranges(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn select_all_children<P: IsA<DOMNode>>(&self, node: &P);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_base_and_extent<P: IsA<DOMNode>, Q: IsA<DOMNode>>(&self, baseNode: &P, baseOffset: libc::c_ulong, extentNode: &Q, extentOffset: libc::c_ulong);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_position<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong);

    fn get_property_anchor_node(&self) -> Option<DOMNode>;

    fn get_property_anchor_offset(&self) -> libc::c_ulong;

    fn get_property_base_node(&self) -> Option<DOMNode>;

    fn get_property_base_offset(&self) -> libc::c_ulong;

    fn get_property_extent_node(&self) -> Option<DOMNode>;

    fn get_property_extent_offset(&self) -> libc::c_ulong;

    fn get_property_focus_node(&self) -> Option<DOMNode>;

    fn get_property_focus_offset(&self) -> libc::c_ulong;

    fn get_property_is_collapsed(&self) -> bool;

    fn get_property_range_count(&self) -> libc::c_ulong;

    fn get_property_type(&self) -> Option<String>;

    fn connect_property_anchor_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_anchor_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_base_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_base_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_extent_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_extent_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_focus_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_focus_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_collapsed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_range_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDOMSelection> + IsA<glib::object::Object>> DOMDOMSelectionExt for O {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn add_range(&self, range: &DOMRange) {
        unsafe {
            ffi::webkit_dom_dom_selection_add_range(self.to_glib_none().0, range.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong) {
        unsafe {
            ffi::webkit_dom_dom_selection_collapse(self.to_glib_none().0, node.to_glib_none().0, offset);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse_to_end(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_dom_selection_collapse_to_end(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn collapse_to_start(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_dom_selection_collapse_to_start(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn contains_node<P: IsA<DOMNode>>(&self, node: &P, allowPartial: bool) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_selection_contains_node(self.to_glib_none().0, node.to_glib_none().0, allowPartial.to_glib()))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn delete_from_document(&self) {
        unsafe {
            ffi::webkit_dom_dom_selection_delete_from_document(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn empty(&self) {
        unsafe {
            ffi::webkit_dom_dom_selection_empty(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn extend<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_dom_selection_extend(self.to_glib_none().0, node.to_glib_none().0, offset, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_anchor_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_selection_get_anchor_node(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_anchor_offset(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_selection_get_anchor_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_base_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_selection_get_base_node(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_base_offset(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_selection_get_base_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_extent_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_selection_get_extent_node(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_extent_offset(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_selection_get_extent_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_focus_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_selection_get_focus_node(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_focus_offset(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_selection_get_focus_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_is_collapsed(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_selection_get_is_collapsed(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_range_at(&self, index: libc::c_ulong) -> Result<DOMRange, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_dom_selection_get_range_at(self.to_glib_none().0, index, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_range_count(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_selection_get_range_count(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_selection_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_selection_get_selection_type(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn modify(&self, alter: &str, direction: &str, granularity: &str) {
        unsafe {
            ffi::webkit_dom_dom_selection_modify(self.to_glib_none().0, alter.to_glib_none().0, direction.to_glib_none().0, granularity.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove_all_ranges(&self) {
        unsafe {
            ffi::webkit_dom_dom_selection_remove_all_ranges(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn select_all_children<P: IsA<DOMNode>>(&self, node: &P) {
        unsafe {
            ffi::webkit_dom_dom_selection_select_all_children(self.to_glib_none().0, node.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_base_and_extent<P: IsA<DOMNode>, Q: IsA<DOMNode>>(&self, baseNode: &P, baseOffset: libc::c_ulong, extentNode: &Q, extentOffset: libc::c_ulong) {
        unsafe {
            ffi::webkit_dom_dom_selection_set_base_and_extent(self.to_glib_none().0, baseNode.to_glib_none().0, baseOffset, extentNode.to_glib_none().0, extentOffset);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_position<P: IsA<DOMNode>>(&self, node: &P, offset: libc::c_ulong) {
        unsafe {
            ffi::webkit_dom_dom_selection_set_position(self.to_glib_none().0, node.to_glib_none().0, offset);
        }
    }

    fn get_property_anchor_node(&self) -> Option<DOMNode> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMNode as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "anchor-node".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_anchor_offset(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "anchor-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_base_node(&self) -> Option<DOMNode> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMNode as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "base-node".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_base_offset(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "base-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_extent_node(&self) -> Option<DOMNode> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMNode as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "extent-node".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_extent_offset(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "extent-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_focus_node(&self) -> Option<DOMNode> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMNode as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "focus-node".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_focus_offset(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "focus-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_is_collapsed(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-collapsed".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_range_count(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "range-count".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_type(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_property_anchor_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::anchor-node",
                transmute(notify_anchor_node_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_anchor_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::anchor-offset",
                transmute(notify_anchor_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_base_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::base-node",
                transmute(notify_base_node_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_base_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::base-offset",
                transmute(notify_base_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_extent_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::extent-node",
                transmute(notify_extent_node_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_extent_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::extent-offset",
                transmute(notify_extent_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_focus_node_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::focus-node",
                transmute(notify_focus_node_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_focus_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::focus-offset",
                transmute(notify_focus_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_is_collapsed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-collapsed",
                transmute(notify_is_collapsed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_range_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::range-count",
                transmute(notify_range_count_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::type",
                transmute(notify_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_anchor_node_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_anchor_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_base_node_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_base_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_extent_node_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_extent_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_focus_node_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_focus_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_is_collapsed_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_range_count_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_type_trampoline<P>(this: *mut ffi::WebKitDOMDOMSelection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMSelection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMSelection::from_glib_borrow(this).downcast_unchecked())
}
