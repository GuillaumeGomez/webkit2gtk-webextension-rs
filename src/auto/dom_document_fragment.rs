// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
#[cfg(feature = "v2_16")]
use DOMNodeList;
use DOMObject;
#[cfg(feature = "v2_16")]
use Error;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(feature = "v2_16")]
use libc;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DOMDocumentFragment(Object<ffi::WebKitDOMDocumentFragment>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_fragment_get_type(),
    }
}

pub trait DOMDocumentFragmentExt {
    #[cfg(feature = "v2_16")]
    fn get_child_element_count(&self) -> libc::c_ulong;

    #[cfg(feature = "v2_16")]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_16")]
    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement>;

    #[cfg(feature = "v2_16")]
    fn get_first_element_child(&self) -> Option<DOMElement>;

    #[cfg(feature = "v2_16")]
    fn get_last_element_child(&self) -> Option<DOMElement>;

    #[cfg(feature = "v2_16")]
    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error>;

    #[cfg(feature = "v2_16")]
    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error>;

    fn get_property_children(&self) -> Option<DOMHTMLCollection>;

    fn get_property_first_element_child(&self) -> Option<DOMElement>;

    fn get_property_last_element_child(&self) -> Option<DOMElement>;
}

impl<O: IsA<DOMDocumentFragment> + IsA<glib::object::Object>> DOMDocumentFragmentExt for O {
    #[cfg(feature = "v2_16")]
    fn get_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_document_fragment_get_child_element_count(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_fragment_get_children(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_element_by_id(self.to_glib_none().0, elementId.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_first_element_child(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_last_element_child(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_fragment_query_selector(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_16")]
    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_fragment_query_selector_all(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_children(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "children".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_first_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "first-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_last_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "last-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }
}
