// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use DOMNodeList;
use DOMObject;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use Error;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMDocumentFragment(Object<ffi::WebKitDOMDocumentFragment, ffi::WebKitDOMDocumentFragmentClass>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_fragment_get_type(),
    }
}

pub trait DOMDocumentFragmentExt {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_child_element_count(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_first_element_child(&self) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_last_element_child(&self) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error>;

    fn get_property_child_element_count(&self) -> libc::c_ulong;

    fn get_property_children(&self) -> Option<DOMHTMLCollection>;

    fn get_property_first_element_child(&self) -> Option<DOMElement>;

    fn get_property_last_element_child(&self) -> Option<DOMElement>;

    fn connect_property_child_element_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_children_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_first_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_last_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDocumentFragment> + IsA<glib::object::Object>> DOMDocumentFragmentExt for O {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_document_fragment_get_child_element_count(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_fragment_get_children(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_element_by_id(self.to_glib_none().0, elementId.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_first_element_child(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_fragment_get_last_element_child(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_fragment_query_selector(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_fragment_query_selector_all(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "child-element-count".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLCollection as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "children".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "first-element-child".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "last-element-child".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_property_child_element_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::child-element-count",
                transmute(notify_child_element_count_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_children_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::children",
                transmute(notify_children_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_first_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::first-element-child",
                transmute(notify_first_element_child_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_last_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::last-element-child",
                transmute(notify_last_element_child_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_child_element_count_trampoline<P>(this: *mut ffi::WebKitDOMDocumentFragment, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentFragment> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentFragment::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_children_trampoline<P>(this: *mut ffi::WebKitDOMDocumentFragment, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentFragment> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentFragment::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_first_element_child_trampoline<P>(this: *mut ffi::WebKitDOMDocumentFragment, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentFragment> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentFragment::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_last_element_child_trampoline<P>(this: *mut ffi::WebKitDOMDocumentFragment, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentFragment> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentFragment::from_glib_borrow(this).downcast_unchecked())
}
