// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

#[cfg(feature = "v2_10")]
use WebPage;
use ffi;
#[cfg(feature = "v2_10")]
use glib::signal::connect;
use glib::translate::*;
#[cfg(feature = "v2_10")]
use glib_ffi;
#[cfg(feature = "v2_10")]
use std::boxed::Box as Box_;
#[cfg(feature = "v2_10")]
use std::mem::transmute;

glib_wrapper! {
    pub struct WebEditor(Object<ffi::WebKitWebEditor>);

    match fn {
        get_type => || ffi::webkit_web_editor_get_type(),
    }
}

impl WebEditor {
    #[cfg(feature = "v2_10")]
    pub fn get_page(&self) -> Option<WebPage> {
        unsafe {
            from_glib_none(ffi::webkit_web_editor_get_page(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_10")]
    pub fn connect_selection_changed<F: Fn(&WebEditor) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebEditor) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "selection-changed",
                transmute(selection_changed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v2_10")]
unsafe extern "C" fn selection_changed_trampoline(this: *mut ffi::WebKitWebEditor, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebEditor) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
