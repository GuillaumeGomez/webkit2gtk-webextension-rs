// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use WebPage;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebExtension(Object<ffi::WebKitWebExtension>);

    match fn {
        get_type => || ffi::webkit_web_extension_get_type(),
    }
}

impl WebExtension {
    pub fn get_page(&self, page_id: u64) -> Option<WebPage> {
        unsafe {
            from_glib_none(ffi::webkit_web_extension_get_page(self.to_glib_none().0, page_id))
        }
    }

    pub fn connect_page_created<F: Fn(&WebExtension, &WebPage) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebExtension, &WebPage) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "page-created",
                transmute(page_created_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn page_created_trampoline(this: *mut ffi::WebKitWebExtension, web_page: *mut ffi::WebKitWebPage, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebExtension, &WebPage) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(web_page))
}
