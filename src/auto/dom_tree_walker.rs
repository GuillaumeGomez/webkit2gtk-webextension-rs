// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use DOMNode;
use DOMObject;
use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use libc;
use std::ptr;

glib_wrapper! {
    pub struct DOMTreeWalker(Object<ffi::WebKitDOMTreeWalker>): DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_tree_walker_get_type(),
    }
}

impl DOMTreeWalker {
    pub fn first_child(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_first_child(self.to_glib_none().0))
        }
    }

    pub fn get_current_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_get_current_node(self.to_glib_none().0))
        }
    }

    pub fn get_expand_entity_references(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_tree_walker_get_expand_entity_references(self.to_glib_none().0))
        }
    }

    //pub fn get_filter(&self) -> /*Ignored*/Option<DOMNodeFilter> {
    //    unsafe { TODO: call ffi::webkit_dom_tree_walker_get_filter() }
    //}

    pub fn get_root(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_get_root(self.to_glib_none().0))
        }
    }

    pub fn get_what_to_show(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_tree_walker_get_what_to_show(self.to_glib_none().0)
        }
    }

    pub fn last_child(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_last_child(self.to_glib_none().0))
        }
    }

    pub fn next_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_next_node(self.to_glib_none().0))
        }
    }

    pub fn next_sibling(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_next_sibling(self.to_glib_none().0))
        }
    }

    pub fn parent_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_parent_node(self.to_glib_none().0))
        }
    }

    pub fn previous_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_previous_node(self.to_glib_none().0))
        }
    }

    pub fn previous_sibling(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_previous_sibling(self.to_glib_none().0))
        }
    }

    pub fn set_current_node<P: IsA<DOMNode>>(&self, value: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_tree_walker_set_current_node(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}
