// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use ContextMenuItem;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct ContextMenu(Object<ffi::WebKitContextMenu>);

    match fn {
        get_type => || ffi::webkit_context_menu_get_type(),
    }
}

impl ContextMenu {
    pub fn new() -> ContextMenu {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_context_menu_new())
        }
    }

    pub fn new_with_items(items: &[ContextMenuItem]) -> ContextMenu {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_context_menu_new_with_items(items.to_glib_none().0))
        }
    }

    pub fn append(&self, item: &ContextMenuItem) {
        unsafe {
            ffi::webkit_context_menu_append(self.to_glib_none().0, item.to_glib_none().0);
        }
    }

    pub fn first(&self) -> Option<ContextMenuItem> {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_first(self.to_glib_none().0))
        }
    }

    pub fn get_item_at_position(&self, position: u32) -> Option<ContextMenuItem> {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_get_item_at_position(self.to_glib_none().0, position))
        }
    }

    pub fn get_items(&self) -> Vec<ContextMenuItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::webkit_context_menu_get_items(self.to_glib_none().0))
        }
    }

    pub fn get_n_items(&self) -> u32 {
        unsafe {
            ffi::webkit_context_menu_get_n_items(self.to_glib_none().0)
        }
    }

    //#[cfg(feature = "v2_8")]
    //pub fn get_user_data(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi::webkit_context_menu_get_user_data() }
    //}

    pub fn insert(&self, item: &ContextMenuItem, position: i32) {
        unsafe {
            ffi::webkit_context_menu_insert(self.to_glib_none().0, item.to_glib_none().0, position);
        }
    }

    pub fn last(&self) -> Option<ContextMenuItem> {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_last(self.to_glib_none().0))
        }
    }

    pub fn move_item(&self, item: &ContextMenuItem, position: i32) {
        unsafe {
            ffi::webkit_context_menu_move_item(self.to_glib_none().0, item.to_glib_none().0, position);
        }
    }

    pub fn prepend(&self, item: &ContextMenuItem) {
        unsafe {
            ffi::webkit_context_menu_prepend(self.to_glib_none().0, item.to_glib_none().0);
        }
    }

    pub fn remove(&self, item: &ContextMenuItem) {
        unsafe {
            ffi::webkit_context_menu_remove(self.to_glib_none().0, item.to_glib_none().0);
        }
    }

    pub fn remove_all(&self) {
        unsafe {
            ffi::webkit_context_menu_remove_all(self.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_8")]
    //pub fn set_user_data(&self, user_data: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi::webkit_context_menu_set_user_data() }
    //}
}
