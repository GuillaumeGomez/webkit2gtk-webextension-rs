// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use DOMStyleSheet;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    pub struct DOMHTMLLinkElement(Object<ffi::WebKitDOMHTMLLinkElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_link_element_get_type(),
    }
}

pub trait DOMHTMLLinkElementExt {
    fn get_charset(&self) -> Option<String>;

    fn get_disabled(&self) -> bool;

    fn get_href(&self) -> Option<String>;

    fn get_hreflang(&self) -> Option<String>;

    fn get_media(&self) -> Option<String>;

    fn get_rel(&self) -> Option<String>;

    fn get_rev(&self) -> Option<String>;

    fn get_sheet(&self) -> Option<DOMStyleSheet>;

    //#[cfg(feature = "v2_16")]
    //fn get_sizes(&self) -> /*Ignored*/Option<DOMDOMTokenList>;

    fn get_target(&self) -> Option<String>;

    fn get_type_attr(&self) -> Option<String>;

    fn set_charset(&self, value: &str);

    fn set_disabled(&self, value: bool);

    fn set_href(&self, value: &str);

    fn set_hreflang(&self, value: &str);

    fn set_media(&self, value: &str);

    fn set_rel(&self, value: &str);

    fn set_rev(&self, value: &str);

    #[cfg(feature = "v2_16")]
    fn set_sizes(&self, value: &str);

    fn set_target(&self, value: &str);

    fn set_type_attr(&self, value: &str);

    //fn get_property_sizes(&self) -> /*Ignored*/Option<DOMDOMTokenList>;

    fn get_property_type(&self) -> Option<String>;

    fn set_property_type(&self, type_: Option<&str>);
}

impl<O: IsA<DOMHTMLLinkElement> + IsA<glib::object::Object>> DOMHTMLLinkElementExt for O {
    fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_charset(self.to_glib_none().0))
        }
    }

    fn get_disabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_link_element_get_disabled(self.to_glib_none().0))
        }
    }

    fn get_href(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_href(self.to_glib_none().0))
        }
    }

    fn get_hreflang(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_hreflang(self.to_glib_none().0))
        }
    }

    fn get_media(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_media(self.to_glib_none().0))
        }
    }

    fn get_rel(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_rel(self.to_glib_none().0))
        }
    }

    fn get_rev(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_rev(self.to_glib_none().0))
        }
    }

    fn get_sheet(&self) -> Option<DOMStyleSheet> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_sheet(self.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_16")]
    //fn get_sizes(&self) -> /*Ignored*/Option<DOMDOMTokenList> {
    //    unsafe { TODO: call ffi::webkit_dom_html_link_element_get_sizes() }
    //}

    fn get_target(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_target(self.to_glib_none().0))
        }
    }

    fn get_type_attr(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_link_element_get_type_attr(self.to_glib_none().0))
        }
    }

    fn set_charset(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_charset(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_disabled(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_disabled(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_href(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_href(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_hreflang(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_hreflang(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_media(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_media(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_rel(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_rel(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_rev(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_rev(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_sizes(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_sizes(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_target(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_target(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_type_attr(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_link_element_set_type_attr(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    //fn get_property_sizes(&self) -> /*Ignored*/Option<DOMDOMTokenList> {
    //    let mut value = Value::from(None::<&/*Ignored*/DOMDOMTokenList>);
    //    unsafe {
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "sizes".to_glib_none().0, value.to_glib_none_mut().0);
    //    }
    //    value.get()
    //}

    fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "type".to_glib_none().0, Value::from(type_).to_glib_none().0);
        }
    }
}
