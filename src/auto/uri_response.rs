// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct URIResponse(Object<ffi::WebKitURIResponse>);

    match fn {
        get_type => || ffi::webkit_uri_response_get_type(),
    }
}

pub trait URIResponseExt {
    fn get_content_length(&self) -> u64;

    //fn get_http_headers(&self) -> /*Ignored*/Option<soup::MessageHeaders>;

    fn get_mime_type(&self) -> Option<String>;

    fn get_status_code(&self) -> u32;

    fn get_suggested_filename(&self) -> Option<String>;

    fn get_uri(&self) -> Option<String>;
}

impl<O: IsA<URIResponse>> URIResponseExt for O {
    fn get_content_length(&self) -> u64 {
        unsafe {
            ffi::webkit_uri_response_get_content_length(self.to_glib_none().0)
        }
    }

    //fn get_http_headers(&self) -> /*Ignored*/Option<soup::MessageHeaders> {
    //    unsafe { TODO: call ffi::webkit_uri_response_get_http_headers() }
    //}

    fn get_mime_type(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_response_get_mime_type(self.to_glib_none().0))
        }
    }

    fn get_status_code(&self) -> u32 {
        unsafe {
            ffi::webkit_uri_response_get_status_code(self.to_glib_none().0)
        }
    }

    fn get_suggested_filename(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_response_get_suggested_filename(self.to_glib_none().0))
        }
    }

    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_response_get_uri(self.to_glib_none().0))
        }
    }
}
