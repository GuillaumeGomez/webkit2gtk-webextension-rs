// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DOMHTMLCanvasElement(Object<ffi::WebKitDOMHTMLCanvasElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_canvas_element_get_type(),
    }
}

pub trait DOMHTMLCanvasElementExt {
    fn get_height(&self) -> libc::c_long;

    fn get_width(&self) -> libc::c_long;

    fn set_height(&self, value: libc::c_long);

    fn set_width(&self, value: libc::c_long);
}

impl<O: IsA<DOMHTMLCanvasElement>> DOMHTMLCanvasElementExt for O {
    fn get_height(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_canvas_element_get_height(self.to_glib_none().0)
        }
    }

    fn get_width(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_canvas_element_get_width(self.to_glib_none().0)
        }
    }

    fn set_height(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_canvas_element_set_height(self.to_glib_none().0, value);
        }
    }

    fn set_width(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_canvas_element_set_width(self.to_glib_none().0, value);
        }
    }
}
