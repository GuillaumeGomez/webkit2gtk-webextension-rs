// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMDOMWindow;
use DOMEvent;
use DOMMouseEvent;
use DOMObject;
use DOMUIEvent;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMWheelEvent(Object<ffi::WebKitDOMWheelEvent, ffi::WebKitDOMWheelEventClass>): DOMMouseEvent, DOMUIEvent, DOMEvent, DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_wheel_event_get_type(),
    }
}

pub trait DOMWheelEventExt {
    fn get_wheel_delta(&self) -> libc::c_long;

    fn get_wheel_delta_x(&self) -> libc::c_long;

    fn get_wheel_delta_y(&self) -> libc::c_long;

    fn init_wheel_event(&self, wheelDeltaX: libc::c_long, wheelDeltaY: libc::c_long, view: &DOMDOMWindow, screenX: libc::c_long, screenY: libc::c_long, clientX: libc::c_long, clientY: libc::c_long, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool);

    fn connect_property_wheel_delta_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wheel_delta_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wheel_delta_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMWheelEvent> + IsA<glib::object::Object>> DOMWheelEventExt for O {
    fn get_wheel_delta(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta(self.to_glib_none().0)
        }
    }

    fn get_wheel_delta_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta_x(self.to_glib_none().0)
        }
    }

    fn get_wheel_delta_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta_y(self.to_glib_none().0)
        }
    }

    fn init_wheel_event(&self, wheelDeltaX: libc::c_long, wheelDeltaY: libc::c_long, view: &DOMDOMWindow, screenX: libc::c_long, screenY: libc::c_long, clientX: libc::c_long, clientY: libc::c_long, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool) {
        unsafe {
            ffi::webkit_dom_wheel_event_init_wheel_event(self.to_glib_none().0, wheelDeltaX, wheelDeltaY, view.to_glib_none().0, screenX, screenY, clientX, clientY, ctrlKey.to_glib(), altKey.to_glib(), shiftKey.to_glib(), metaKey.to_glib());
        }
    }

    fn connect_property_wheel_delta_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wheel-delta",
                transmute(notify_wheel_delta_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wheel_delta_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wheel-delta-x",
                transmute(notify_wheel_delta_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wheel_delta_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wheel-delta-y",
                transmute(notify_wheel_delta_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_wheel_delta_trampoline<P>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMWheelEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMWheelEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wheel_delta_x_trampoline<P>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMWheelEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMWheelEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wheel_delta_y_trampoline<P>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMWheelEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMWheelEvent::from_glib_borrow(this).downcast_unchecked())
}
