// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct HitTestResult(Object<ffi::WebKitHitTestResult, ffi::WebKitHitTestResultClass>);

    match fn {
        get_type => || ffi::webkit_hit_test_result_get_type(),
    }
}

pub trait HitTestResultExt {
    fn context_is_editable(&self) -> bool;

    fn context_is_image(&self) -> bool;

    fn context_is_link(&self) -> bool;

    fn context_is_media(&self) -> bool;

    fn context_is_scrollbar(&self) -> bool;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn context_is_selection(&self) -> bool;

    fn get_context(&self) -> u32;

    fn get_image_uri(&self) -> Option<String>;

    fn get_link_label(&self) -> Option<String>;

    fn get_link_title(&self) -> Option<String>;

    fn get_link_uri(&self) -> Option<String>;

    fn get_media_uri(&self) -> Option<String>;

    fn connect_property_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_image_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_link_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_link_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_link_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_media_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<HitTestResult> + IsA<glib::object::Object>> HitTestResultExt for O {
    fn context_is_editable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_editable(self.to_glib_none().0))
        }
    }

    fn context_is_image(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_image(self.to_glib_none().0))
        }
    }

    fn context_is_link(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_link(self.to_glib_none().0))
        }
    }

    fn context_is_media(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_media(self.to_glib_none().0))
        }
    }

    fn context_is_scrollbar(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_scrollbar(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn context_is_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_hit_test_result_context_is_selection(self.to_glib_none().0))
        }
    }

    fn get_context(&self) -> u32 {
        unsafe {
            ffi::webkit_hit_test_result_get_context(self.to_glib_none().0)
        }
    }

    fn get_image_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_hit_test_result_get_image_uri(self.to_glib_none().0))
        }
    }

    fn get_link_label(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_hit_test_result_get_link_label(self.to_glib_none().0))
        }
    }

    fn get_link_title(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_hit_test_result_get_link_title(self.to_glib_none().0))
        }
    }

    fn get_link_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_hit_test_result_get_link_uri(self.to_glib_none().0))
        }
    }

    fn get_media_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_hit_test_result_get_media_uri(self.to_glib_none().0))
        }
    }

    fn connect_property_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::context",
                transmute(notify_context_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_image_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::image-uri",
                transmute(notify_image_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_link_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::link-label",
                transmute(notify_link_label_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_link_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::link-title",
                transmute(notify_link_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_link_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::link-uri",
                transmute(notify_link_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_media_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::media-uri",
                transmute(notify_media_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_context_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_image_uri_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_link_label_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_link_title_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_link_uri_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_media_uri_trampoline<P>(this: *mut ffi::WebKitHitTestResult, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HitTestResult> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HitTestResult::from_glib_borrow(this).downcast_unchecked())
}
