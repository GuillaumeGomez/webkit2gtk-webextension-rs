// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use libc;

glib_wrapper! {
    pub struct DOMHTMLLIElement(Object<ffi::WebKitDOMHTMLLIElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_li_element_get_type(),
    }
}

pub trait DOMHTMLLIElementExt {
    fn get_type_attr(&self) -> Option<String>;

    fn get_value(&self) -> libc::c_long;

    fn set_type_attr(&self, value: &str);

    fn set_value(&self, value: libc::c_long);

    fn get_property_type(&self) -> Option<String>;

    fn set_property_type(&self, type_: Option<&str>);
}

impl<O: IsA<DOMHTMLLIElement> + IsA<glib::object::Object>> DOMHTMLLIElementExt for O {
    fn get_type_attr(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_li_element_get_type_attr(self.to_glib_none().0))
        }
    }

    fn get_value(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_li_element_get_value(self.to_glib_none().0)
        }
    }

    fn set_type_attr(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_li_element_set_type_attr(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_value(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_li_element_set_value(self.to_glib_none().0, value);
        }
    }

    fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "type".to_glib_none().0, Value::from(type_).to_glib_none().0);
        }
    }
}
