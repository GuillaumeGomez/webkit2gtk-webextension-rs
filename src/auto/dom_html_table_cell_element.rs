// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::translate::*;
use libc;

glib_wrapper! {
    pub struct DOMHTMLTableCellElement(Object<ffi::WebKitDOMHTMLTableCellElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_table_cell_element_get_type(),
    }
}

impl DOMHTMLTableCellElement {
    pub fn get_abbr(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_abbr(self.to_glib_none().0))
        }
    }

    pub fn get_align(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_align(self.to_glib_none().0))
        }
    }

    pub fn get_axis(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_axis(self.to_glib_none().0))
        }
    }

    pub fn get_bg_color(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_bg_color(self.to_glib_none().0))
        }
    }

    pub fn get_cell_index(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_get_cell_index(self.to_glib_none().0)
        }
    }

    pub fn get_ch(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_ch(self.to_glib_none().0))
        }
    }

    pub fn get_ch_off(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_ch_off(self.to_glib_none().0))
        }
    }

    pub fn get_col_span(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_get_col_span(self.to_glib_none().0)
        }
    }

    pub fn get_headers(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_headers(self.to_glib_none().0))
        }
    }

    pub fn get_height(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_height(self.to_glib_none().0))
        }
    }

    pub fn get_no_wrap(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_table_cell_element_get_no_wrap(self.to_glib_none().0))
        }
    }

    pub fn get_row_span(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_get_row_span(self.to_glib_none().0)
        }
    }

    pub fn get_scope(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_scope(self.to_glib_none().0))
        }
    }

    pub fn get_v_align(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_v_align(self.to_glib_none().0))
        }
    }

    pub fn get_width(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_cell_element_get_width(self.to_glib_none().0))
        }
    }

    pub fn set_abbr(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_abbr(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_align(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_axis(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_axis(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_bg_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_bg_color(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_ch(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_ch(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_ch_off(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_ch_off(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_col_span(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_col_span(self.to_glib_none().0, value);
        }
    }

    pub fn set_headers(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_headers(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_height(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_height(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_no_wrap(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_no_wrap(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_row_span(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_row_span(self.to_glib_none().0, value);
        }
    }

    pub fn set_scope(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_scope(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_v_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_v_align(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_width(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_cell_element_set_width(self.to_glib_none().0, value.to_glib_none().0);
        }
    }
}
