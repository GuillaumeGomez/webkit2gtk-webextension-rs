// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use DOMEvent;
use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::ptr;

glib_wrapper! {
    pub struct DOMEventTarget(Object<ffi::WebKitDOMEventTarget>);

    match fn {
        get_type => || ffi::webkit_dom_event_target_get_type(),
    }
}

pub trait DOMEventTargetExt {
    //fn add_event_listener<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, event_name: &str, handler: /*Unknown conversion*//*Unimplemented*/Callback, use_capture: bool, user_data: P) -> bool;

    //fn add_event_listener_with_closure(&self, event_name: &str, handler: /*Ignored*/&glib::Closure, use_capture: bool) -> bool;

    fn dispatch_event<P: IsA<DOMEvent>>(&self, event: &P) -> Result<(), Error>;

    //fn remove_event_listener(&self, event_name: &str, handler: /*Unknown conversion*//*Unimplemented*/Callback, use_capture: bool) -> bool;

    //fn remove_event_listener_with_closure(&self, event_name: &str, handler: /*Ignored*/&glib::Closure, use_capture: bool) -> bool;
}

impl<O: IsA<DOMEventTarget>> DOMEventTargetExt for O {
    //fn add_event_listener<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, event_name: &str, handler: /*Unknown conversion*//*Unimplemented*/Callback, use_capture: bool, user_data: P) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_event_target_add_event_listener() }
    //}

    //fn add_event_listener_with_closure(&self, event_name: &str, handler: /*Ignored*/&glib::Closure, use_capture: bool) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_event_target_add_event_listener_with_closure() }
    //}

    fn dispatch_event<P: IsA<DOMEvent>>(&self, event: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_event_target_dispatch_event(self.to_glib_none().0, event.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //fn remove_event_listener(&self, event_name: &str, handler: /*Unknown conversion*//*Unimplemented*/Callback, use_capture: bool) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_event_target_remove_event_listener() }
    //}

    //fn remove_event_listener_with_closure(&self, event_name: &str, handler: /*Ignored*/&glib::Closure, use_capture: bool) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_event_target_remove_event_listener_with_closure() }
    //}
}
