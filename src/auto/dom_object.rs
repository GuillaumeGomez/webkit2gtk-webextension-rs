// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMObject(Object<ffi::WebKitDOMObject, ffi::WebKitDOMObjectClass>);

    match fn {
        get_type => || ffi::webkit_dom_object_get_type(),
    }
}

pub trait DOMObjectExt {
    fn connect_property_core_object_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMObject> + IsA<glib::object::Object>> DOMObjectExt for O {
    fn connect_property_core_object_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::core-object",
                transmute(notify_core_object_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_core_object_trampoline<P>(this: *mut ffi::WebKitDOMObject, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMObject> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMObject::from_glib_borrow(this).downcast_unchecked())
}
