// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use DOMAttr;
use DOMCDATASection;
use DOMCSSStyleDeclaration;
use DOMComment;
use DOMDOMImplementation;
use DOMDOMWindow;
use DOMDocumentFragment;
use DOMDocumentType;
use DOMElement;
use DOMEntityReference;
use DOMEvent;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMHTMLElement;
use DOMHTMLHeadElement;
use DOMHTMLScriptElement;
use DOMNode;
use DOMNodeList;
use DOMObject;
use DOMProcessingInstruction;
use DOMRange;
use DOMStyleSheetList;
use DOMText;
use Error;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use libc;
use std::ptr;

glib_wrapper! {
    pub struct DOMDocument(Object<ffi::WebKitDOMDocument>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_get_type(),
    }
}

pub trait DOMDocumentExt {
    fn adopt_node<P: IsA<DOMNode>>(&self, source: &P) -> Result<DOMNode, Error>;

    #[cfg(feature = "v2_16")]
    fn caret_range_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMRange>;

    fn create_attribute(&self, name: &str) -> Result<DOMAttr, Error>;

    fn create_attribute_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMAttr, Error>;

    fn create_cdata_section(&self, data: &str) -> Result<DOMCDATASection, Error>;

    fn create_comment(&self, data: &str) -> Option<DOMComment>;

    fn create_css_style_declaration(&self) -> Option<DOMCSSStyleDeclaration>;

    fn create_document_fragment(&self) -> Option<DOMDocumentFragment>;

    fn create_element(&self, tagName: &str) -> Result<DOMElement, Error>;

    fn create_element_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMElement, Error>;

    fn create_entity_reference<'a, P: Into<Option<&'a str>>>(&self, name: P) -> Result<DOMEntityReference, Error>;

    fn create_event(&self, eventType: &str) -> Result<DOMEvent, Error>;

    //fn create_expression<P: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, resolver: &P) -> Result<DOMXPathExpression, Error>;

    //fn create_node_iterator<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMNodeIterator, Error>;

    //fn create_ns_resolver<P: IsA<DOMNode>>(&self, nodeResolver: &P) -> /*Ignored*/Option<DOMXPathNSResolver>;

    fn create_processing_instruction(&self, target: &str, data: &str) -> Result<DOMProcessingInstruction, Error>;

    fn create_range(&self) -> Option<DOMRange>;

    fn create_text_node(&self, data: &str) -> Option<DOMText>;

    //fn create_tree_walker<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMTreeWalker, Error>;

    fn element_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMElement>;

    //fn evaluate<'a, 'b, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMXPathNSResolver> + 'a, R: Into<Option<&'a Q>>, S: Into<Option<&'b DOMXPathResult>>>(&self, expression: &str, contextNode: &P, resolver: R, type_: libc::c_ushort, inResult: S) -> Result<DOMXPathResult, Error>;

    fn exec_command(&self, command: &str, userInterface: bool, value: &str) -> bool;

    #[cfg(feature = "v2_16")]
    fn exit_pointer_lock(&self);

    fn get_active_element(&self) -> Option<DOMElement>;

    fn get_anchors(&self) -> Option<DOMHTMLCollection>;

    fn get_applets(&self) -> Option<DOMHTMLCollection>;

    fn get_body(&self) -> Option<DOMHTMLElement>;

    fn get_character_set(&self) -> Option<String>;

    fn get_charset(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_child_element_count(&self) -> libc::c_ulong;

    #[cfg(feature = "v2_16")]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_14")]
    fn get_compat_mode(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_content_type(&self) -> Option<String>;

    fn get_cookie(&self) -> Result<String, Error>;

    #[cfg(feature = "v2_16")]
    fn get_current_script(&self) -> Option<DOMHTMLScriptElement>;

    fn get_default_charset(&self) -> Option<String>;

    fn get_default_view(&self) -> Option<DOMDOMWindow>;

    #[cfg(feature = "v2_14")]
    fn get_design_mode(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_dir(&self) -> Option<String>;

    fn get_doctype(&self) -> Option<DOMDocumentType>;

    fn get_document_element(&self) -> Option<DOMElement>;

    fn get_document_uri(&self) -> Option<String>;

    fn get_domain(&self) -> Option<String>;

    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement>;

    fn get_elements_by_class_name(&self, class_name: &str) -> Option<DOMNodeList>;

    #[cfg(feature = "v2_12")]
    fn get_elements_by_class_name_as_html_collection(&self, classNames: &str) -> Option<DOMHTMLCollection>;

    fn get_elements_by_name(&self, elementName: &str) -> Option<DOMNodeList>;

    fn get_elements_by_tag_name(&self, tag_name: &str) -> Option<DOMNodeList>;

    #[cfg(feature = "v2_12")]
    fn get_elements_by_tag_name_as_html_collection(&self, tagname: &str) -> Option<DOMHTMLCollection>;

    fn get_elements_by_tag_name_ns(&self, namespace_uri: &str, tag_name: &str) -> Option<DOMNodeList>;

    #[cfg(feature = "v2_12")]
    fn get_elements_by_tag_name_ns_as_html_collection(&self, namespaceURI: &str, localName: &str) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_14")]
    fn get_embeds(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_16")]
    fn get_first_element_child(&self) -> Option<DOMElement>;

    fn get_forms(&self) -> Option<DOMHTMLCollection>;

    fn get_head(&self) -> Option<DOMHTMLHeadElement>;

    #[cfg(feature = "v2_16")]
    fn get_hidden(&self) -> bool;

    fn get_images(&self) -> Option<DOMHTMLCollection>;

    fn get_implementation(&self) -> Option<DOMDOMImplementation>;

    fn get_input_encoding(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_last_element_child(&self) -> Option<DOMElement>;

    fn get_last_modified(&self) -> Option<String>;

    fn get_links(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_16")]
    fn get_origin(&self) -> Option<String>;

    fn get_override_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration>;

    #[cfg(feature = "v2_14")]
    fn get_plugins(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_16")]
    fn get_pointer_lock_element(&self) -> Option<DOMElement>;

    fn get_preferred_stylesheet_set(&self) -> Option<String>;

    fn get_ready_state(&self) -> Option<String>;

    fn get_referrer(&self) -> Option<String>;

    #[cfg(feature = "v2_14")]
    fn get_scripts(&self) -> Option<DOMHTMLCollection>;

    #[cfg(feature = "v2_16")]
    fn get_scrolling_element(&self) -> Option<DOMElement>;

    fn get_selected_stylesheet_set(&self) -> Option<String>;

    fn get_style_sheets(&self) -> Option<DOMStyleSheetList>;

    fn get_title(&self) -> Option<String>;

    fn get_url(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_visibility_state(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_webkit_current_fullscreen_element(&self) -> Option<DOMElement>;

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_element(&self) -> Option<DOMElement>;

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_enabled(&self) -> bool;

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_keyboard_input_allowed(&self) -> bool;

    #[cfg(feature = "v2_16")]
    fn get_webkit_is_fullscreen(&self) -> bool;

    fn get_xml_encoding(&self) -> Option<String>;

    fn get_xml_standalone(&self) -> bool;

    fn get_xml_version(&self) -> Option<String>;

    fn has_focus(&self) -> bool;

    fn import_node<P: IsA<DOMNode>>(&self, importedNode: &P, deep: bool) -> Result<DOMNode, Error>;

    fn query_command_enabled(&self, command: &str) -> bool;

    fn query_command_indeterm(&self, command: &str) -> bool;

    fn query_command_state(&self, command: &str) -> bool;

    fn query_command_supported(&self, command: &str) -> bool;

    fn query_command_value(&self, command: &str) -> Option<String>;

    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error>;

    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error>;

    fn set_body<P: IsA<DOMHTMLElement>>(&self, value: &P) -> Result<(), Error>;

    fn set_charset(&self, value: &str);

    fn set_cookie(&self, value: &str) -> Result<(), Error>;

    #[cfg(feature = "v2_14")]
    fn set_design_mode(&self, value: &str);

    #[cfg(feature = "v2_16")]
    fn set_dir(&self, value: &str);

    fn set_document_uri(&self, value: &str);

    fn set_selected_stylesheet_set(&self, value: &str);

    fn set_title(&self, value: &str);

    fn set_xml_standalone(&self, value: bool) -> Result<(), Error>;

    fn set_xml_version(&self, value: &str) -> Result<(), Error>;

    #[cfg(feature = "v2_16")]
    fn webkit_cancel_fullscreen(&self);

    #[cfg(feature = "v2_16")]
    fn webkit_exit_fullscreen(&self);

    fn get_property_children(&self) -> Option<DOMHTMLCollection>;

    fn get_property_compat_mode(&self) -> Option<String>;

    fn get_property_content_type(&self) -> Option<String>;

    fn get_property_current_script(&self) -> Option<DOMHTMLScriptElement>;

    fn get_property_design_mode(&self) -> Option<String>;

    fn set_property_design_mode(&self, design_mode: Option<&str>);

    fn get_property_dir(&self) -> Option<String>;

    fn set_property_dir(&self, dir: Option<&str>);

    fn get_property_embeds(&self) -> Option<DOMHTMLCollection>;

    fn get_property_first_element_child(&self) -> Option<DOMElement>;

    fn get_property_hidden(&self) -> bool;

    fn get_property_last_element_child(&self) -> Option<DOMElement>;

    fn get_property_origin(&self) -> Option<String>;

    fn get_property_plugins(&self) -> Option<DOMHTMLCollection>;

    fn get_property_pointer_lock_element(&self) -> Option<DOMElement>;

    fn get_property_scripts(&self) -> Option<DOMHTMLCollection>;

    fn get_property_scrolling_element(&self) -> Option<DOMElement>;

    fn get_property_visibility_state(&self) -> Option<String>;

    fn get_property_webkit_current_full_screen_element(&self) -> Option<DOMElement>;

    fn get_property_webkit_full_screen_keyboard_input_allowed(&self) -> bool;

    fn get_property_webkit_fullscreen_element(&self) -> Option<DOMElement>;

    fn get_property_webkit_fullscreen_enabled(&self) -> bool;

    fn get_property_webkit_is_full_screen(&self) -> bool;
}

impl<O: IsA<DOMDocument> + IsA<glib::object::Object>> DOMDocumentExt for O {
    fn adopt_node<P: IsA<DOMNode>>(&self, source: &P) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_adopt_node(self.to_glib_none().0, source.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_16")]
    fn caret_range_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMRange> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_caret_range_from_point(self.to_glib_none().0, x, y))
        }
    }

    fn create_attribute(&self, name: &str) -> Result<DOMAttr, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_attribute(self.to_glib_none().0, name.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_attribute_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMAttr, Error> {
        let namespaceURI = namespaceURI.into();
        let namespaceURI = namespaceURI.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_attribute_ns(self.to_glib_none().0, namespaceURI.0, qualifiedName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_cdata_section(&self, data: &str) -> Result<DOMCDATASection, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_cdata_section(self.to_glib_none().0, data.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_comment(&self, data: &str) -> Option<DOMComment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_comment(self.to_glib_none().0, data.to_glib_none().0))
        }
    }

    fn create_css_style_declaration(&self) -> Option<DOMCSSStyleDeclaration> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_create_css_style_declaration(self.to_glib_none().0))
        }
    }

    fn create_document_fragment(&self) -> Option<DOMDocumentFragment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_document_fragment(self.to_glib_none().0))
        }
    }

    fn create_element(&self, tagName: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_element(self.to_glib_none().0, tagName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_element_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMElement, Error> {
        let namespaceURI = namespaceURI.into();
        let namespaceURI = namespaceURI.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_element_ns(self.to_glib_none().0, namespaceURI.0, qualifiedName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_entity_reference<'a, P: Into<Option<&'a str>>>(&self, name: P) -> Result<DOMEntityReference, Error> {
        let name = name.into();
        let name = name.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_entity_reference(self.to_glib_none().0, name.0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_event(&self, eventType: &str) -> Result<DOMEvent, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_event(self.to_glib_none().0, eventType.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn create_expression<P: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, resolver: &P) -> Result<DOMXPathExpression, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_expression() }
    //}

    //fn create_node_iterator<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMNodeIterator, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_node_iterator() }
    //}

    //fn create_ns_resolver<P: IsA<DOMNode>>(&self, nodeResolver: &P) -> /*Ignored*/Option<DOMXPathNSResolver> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_ns_resolver() }
    //}

    fn create_processing_instruction(&self, target: &str, data: &str) -> Result<DOMProcessingInstruction, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_processing_instruction(self.to_glib_none().0, target.to_glib_none().0, data.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_range(&self) -> Option<DOMRange> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_create_range(self.to_glib_none().0))
        }
    }

    fn create_text_node(&self, data: &str) -> Option<DOMText> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_text_node(self.to_glib_none().0, data.to_glib_none().0))
        }
    }

    //fn create_tree_walker<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMTreeWalker, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_tree_walker() }
    //}

    fn element_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_element_from_point(self.to_glib_none().0, x, y))
        }
    }

    //fn evaluate<'a, 'b, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMXPathNSResolver> + 'a, R: Into<Option<&'a Q>>, S: Into<Option<&'b DOMXPathResult>>>(&self, expression: &str, contextNode: &P, resolver: R, type_: libc::c_ushort, inResult: S) -> Result<DOMXPathResult, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_evaluate() }
    //}

    fn exec_command(&self, command: &str, userInterface: bool, value: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_exec_command(self.to_glib_none().0, command.to_glib_none().0, userInterface.to_glib(), value.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn exit_pointer_lock(&self) {
        unsafe {
            ffi::webkit_dom_document_exit_pointer_lock(self.to_glib_none().0);
        }
    }

    fn get_active_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_active_element(self.to_glib_none().0))
        }
    }

    fn get_anchors(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_anchors(self.to_glib_none().0))
        }
    }

    fn get_applets(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_applets(self.to_glib_none().0))
        }
    }

    fn get_body(&self) -> Option<DOMHTMLElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_body(self.to_glib_none().0))
        }
    }

    fn get_character_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_character_set(self.to_glib_none().0))
        }
    }

    fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_charset(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_document_get_child_element_count(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_children(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_compat_mode(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_compat_mode(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_content_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_content_type(self.to_glib_none().0))
        }
    }

    fn get_cookie(&self) -> Result<String, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_get_cookie(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_current_script(&self) -> Option<DOMHTMLScriptElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_current_script(self.to_glib_none().0))
        }
    }

    fn get_default_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_charset(self.to_glib_none().0))
        }
    }

    fn get_default_view(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_view(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_design_mode(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_design_mode(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_dir(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_dir(self.to_glib_none().0))
        }
    }

    fn get_doctype(&self) -> Option<DOMDocumentType> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_doctype(self.to_glib_none().0))
        }
    }

    fn get_document_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_document_element(self.to_glib_none().0))
        }
    }

    fn get_document_uri(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_document_uri(self.to_glib_none().0))
        }
    }

    fn get_domain(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_domain(self.to_glib_none().0))
        }
    }

    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_element_by_id(self.to_glib_none().0, elementId.to_glib_none().0))
        }
    }

    fn get_elements_by_class_name(&self, class_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_class_name(self.to_glib_none().0, class_name.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    fn get_elements_by_class_name_as_html_collection(&self, classNames: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_class_name_as_html_collection(self.to_glib_none().0, classNames.to_glib_none().0))
        }
    }

    fn get_elements_by_name(&self, elementName: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_name(self.to_glib_none().0, elementName.to_glib_none().0))
        }
    }

    fn get_elements_by_tag_name(&self, tag_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name(self.to_glib_none().0, tag_name.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    fn get_elements_by_tag_name_as_html_collection(&self, tagname: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_as_html_collection(self.to_glib_none().0, tagname.to_glib_none().0))
        }
    }

    fn get_elements_by_tag_name_ns(&self, namespace_uri: &str, tag_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_ns(self.to_glib_none().0, namespace_uri.to_glib_none().0, tag_name.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    fn get_elements_by_tag_name_ns_as_html_collection(&self, namespaceURI: &str, localName: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_ns_as_html_collection(self.to_glib_none().0, namespaceURI.to_glib_none().0, localName.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_embeds(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_embeds(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_first_element_child(self.to_glib_none().0))
        }
    }

    fn get_forms(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_forms(self.to_glib_none().0))
        }
    }

    fn get_head(&self) -> Option<DOMHTMLHeadElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_head(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_hidden(self.to_glib_none().0))
        }
    }

    fn get_images(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_images(self.to_glib_none().0))
        }
    }

    fn get_implementation(&self) -> Option<DOMDOMImplementation> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_implementation(self.to_glib_none().0))
        }
    }

    fn get_input_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_input_encoding(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_last_element_child(self.to_glib_none().0))
        }
    }

    fn get_last_modified(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_last_modified(self.to_glib_none().0))
        }
    }

    fn get_links(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_links(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_origin(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_origin(self.to_glib_none().0))
        }
    }

    fn get_override_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration> {
        let pseudoElement = pseudoElement.into();
        let pseudoElement = pseudoElement.to_glib_none();
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_override_style(self.to_glib_none().0, element.to_glib_none().0, pseudoElement.0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_plugins(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_plugins(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_pointer_lock_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_pointer_lock_element(self.to_glib_none().0))
        }
    }

    fn get_preferred_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_preferred_stylesheet_set(self.to_glib_none().0))
        }
    }

    fn get_ready_state(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_ready_state(self.to_glib_none().0))
        }
    }

    fn get_referrer(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_referrer(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_scripts(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_scripts(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_scrolling_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_scrolling_element(self.to_glib_none().0))
        }
    }

    fn get_selected_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_selected_stylesheet_set(self.to_glib_none().0))
        }
    }

    fn get_style_sheets(&self) -> Option<DOMStyleSheetList> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_style_sheets(self.to_glib_none().0))
        }
    }

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_title(self.to_glib_none().0))
        }
    }

    fn get_url(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_url(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_visibility_state(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_visibility_state(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkit_current_fullscreen_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_webkit_current_fullscreen_element(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_webkit_fullscreen_element(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_fullscreen_enabled(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkit_fullscreen_keyboard_input_allowed(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_fullscreen_keyboard_input_allowed(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkit_is_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_is_fullscreen(self.to_glib_none().0))
        }
    }

    fn get_xml_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_encoding(self.to_glib_none().0))
        }
    }

    fn get_xml_standalone(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_xml_standalone(self.to_glib_none().0))
        }
    }

    fn get_xml_version(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_version(self.to_glib_none().0))
        }
    }

    fn has_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_has_focus(self.to_glib_none().0))
        }
    }

    fn import_node<P: IsA<DOMNode>>(&self, importedNode: &P, deep: bool) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_import_node(self.to_glib_none().0, importedNode.to_glib_none().0, deep.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn query_command_enabled(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_enabled(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_indeterm(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_indeterm(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_state(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_state(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_supported(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_supported(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_value(&self, command: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_query_command_value(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_query_selector(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_query_selector_all(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_body<P: IsA<DOMHTMLElement>>(&self, value: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_body(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_charset(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_charset(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_cookie(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_cookie(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_14")]
    fn set_design_mode(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_design_mode(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_dir(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_dir(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_document_uri(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_document_uri(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_selected_stylesheet_set(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_selected_stylesheet_set(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_title(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_xml_standalone(&self, value: bool) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_xml_standalone(self.to_glib_none().0, value.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_xml_version(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_xml_version(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_16")]
    fn webkit_cancel_fullscreen(&self) {
        unsafe {
            ffi::webkit_dom_document_webkit_cancel_fullscreen(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_16")]
    fn webkit_exit_fullscreen(&self) {
        unsafe {
            ffi::webkit_dom_document_webkit_exit_fullscreen(self.to_glib_none().0);
        }
    }

    fn get_property_children(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "children".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_compat_mode(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "compat-mode".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_content_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "content-type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_current_script(&self) -> Option<DOMHTMLScriptElement> {
        let mut value = Value::from(None::<&DOMHTMLScriptElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "current-script".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_design_mode(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "design-mode".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_design_mode(&self, design_mode: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "design-mode".to_glib_none().0, Value::from(design_mode).to_glib_none().0);
        }
    }

    fn get_property_dir(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "dir".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_dir(&self, dir: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "dir".to_glib_none().0, Value::from(dir).to_glib_none().0);
        }
    }

    fn get_property_embeds(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "embeds".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_first_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "first-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_hidden(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hidden".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_last_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "last-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_origin(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "origin".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_plugins(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "plugins".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_pointer_lock_element(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pointer-lock-element".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_scripts(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scripts".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_scrolling_element(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scrolling-element".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_visibility_state(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "visibility-state".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_webkit_current_full_screen_element(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-current-full-screen-element".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_webkit_full_screen_keyboard_input_allowed(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-full-screen-keyboard-input-allowed".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_webkit_fullscreen_element(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-fullscreen-element".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_webkit_fullscreen_enabled(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-fullscreen-enabled".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_webkit_is_full_screen(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-is-full-screen".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }
}
