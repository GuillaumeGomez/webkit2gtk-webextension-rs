// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMAttr;
use DOMCDATASection;
use DOMCSSStyleDeclaration;
use DOMComment;
use DOMDOMImplementation;
use DOMDOMWindow;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use DOMDocumentFragment;
use DOMDocumentType;
use DOMElement;
use DOMEntityReference;
use DOMEvent;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMHTMLElement;
use DOMHTMLHeadElement;
use DOMHTMLScriptElement;
use DOMNode;
use DOMNodeList;
use DOMObject;
use DOMProcessingInstruction;
use DOMRange;
use DOMStyleSheetList;
use DOMText;
use Error;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMDocument(Object<ffi::WebKitDOMDocument, ffi::WebKitDOMDocumentClass>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_get_type(),
    }
}

pub trait DOMDocumentExt {
    fn adopt_node<P: IsA<DOMNode>>(&self, source: &P) -> Result<DOMNode, Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn caret_range_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMRange>;

    fn create_attribute(&self, name: &str) -> Result<DOMAttr, Error>;

    fn create_attribute_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMAttr, Error>;

    fn create_cdata_section(&self, data: &str) -> Result<DOMCDATASection, Error>;

    fn create_comment(&self, data: &str) -> Option<DOMComment>;

    fn create_css_style_declaration(&self) -> Option<DOMCSSStyleDeclaration>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn create_document_fragment(&self) -> Option<DOMDocumentFragment>;

    fn create_element(&self, tagName: &str) -> Result<DOMElement, Error>;

    fn create_element_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMElement, Error>;

    fn create_entity_reference<'a, P: Into<Option<&'a str>>>(&self, name: P) -> Result<DOMEntityReference, Error>;

    fn create_event(&self, eventType: &str) -> Result<DOMEvent, Error>;

    //fn create_expression<P: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, resolver: &P) -> Result<DOMXPathExpression, Error>;

    //fn create_node_iterator<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMNodeIterator, Error>;

    //fn create_ns_resolver<P: IsA<DOMNode>>(&self, nodeResolver: &P) -> /*Ignored*/Option<DOMXPathNSResolver>;

    fn create_processing_instruction(&self, target: &str, data: &str) -> Result<DOMProcessingInstruction, Error>;

    fn create_range(&self) -> Option<DOMRange>;

    fn create_text_node(&self, data: &str) -> Option<DOMText>;

    //fn create_tree_walker<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMTreeWalker, Error>;

    fn element_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMElement>;

    //fn evaluate<'a, 'b, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMXPathNSResolver> + 'a, R: Into<Option<&'a Q>>, S: Into<Option<&'b DOMXPathResult>>>(&self, expression: &str, contextNode: &P, resolver: R, type_: libc::c_ushort, inResult: S) -> Result<DOMXPathResult, Error>;

    fn exec_command(&self, command: &str, userInterface: bool, value: &str) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn exit_pointer_lock(&self);

    fn get_active_element(&self) -> Option<DOMElement>;

    fn get_anchors(&self) -> Option<DOMHTMLCollection>;

    fn get_applets(&self) -> Option<DOMHTMLCollection>;

    fn get_body(&self) -> Option<DOMHTMLElement>;

    fn get_character_set(&self) -> Option<String>;

    fn get_charset(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_child_element_count(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_compat_mode(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_content_type(&self) -> Option<String>;

    fn get_cookie(&self) -> Result<String, Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_current_script(&self) -> Option<DOMHTMLScriptElement>;

    fn get_default_charset(&self) -> Option<String>;

    fn get_default_view(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_design_mode(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_dir(&self) -> Option<String>;

    fn get_doctype(&self) -> Option<DOMDocumentType>;

    fn get_document_element(&self) -> Option<DOMElement>;

    fn get_document_uri(&self) -> Option<String>;

    fn get_domain(&self) -> Option<String>;

    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement>;

    fn get_elements_by_class_name(&self, class_name: &str) -> Option<DOMNodeList>;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_class_name_as_html_collection(&self, classNames: &str) -> Option<DOMHTMLCollection>;

    fn get_elements_by_name(&self, elementName: &str) -> Option<DOMNodeList>;

    fn get_elements_by_tag_name(&self, tag_name: &str) -> Option<DOMNodeList>;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_tag_name_as_html_collection(&self, tagname: &str) -> Option<DOMHTMLCollection>;

    fn get_elements_by_tag_name_ns(&self, namespace_uri: &str, tag_name: &str) -> Option<DOMNodeList>;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_tag_name_ns_as_html_collection(&self, namespaceURI: &str, localName: &str) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_embeds(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_first_element_child(&self) -> Option<DOMElement>;

    fn get_forms(&self) -> Option<DOMHTMLCollection>;

    fn get_head(&self) -> Option<DOMHTMLHeadElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool;

    fn get_images(&self) -> Option<DOMHTMLCollection>;

    fn get_implementation(&self) -> Option<DOMDOMImplementation>;

    fn get_input_encoding(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_last_element_child(&self) -> Option<DOMElement>;

    fn get_last_modified(&self) -> Option<String>;

    fn get_links(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_origin(&self) -> Option<String>;

    fn get_override_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_plugins(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_pointer_lock_element(&self) -> Option<DOMElement>;

    fn get_preferred_stylesheet_set(&self) -> Option<String>;

    fn get_ready_state(&self) -> Option<String>;

    fn get_referrer(&self) -> Option<String>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_scripts(&self) -> Option<DOMHTMLCollection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scrolling_element(&self) -> Option<DOMElement>;

    fn get_selected_stylesheet_set(&self) -> Option<String>;

    fn get_style_sheets(&self) -> Option<DOMStyleSheetList>;

    fn get_title(&self) -> Option<String>;

    fn get_url(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_visibility_state(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_current_fullscreen_element(&self) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_element(&self) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_enabled(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_keyboard_input_allowed(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_is_fullscreen(&self) -> bool;

    fn get_xml_encoding(&self) -> Option<String>;

    fn get_xml_standalone(&self) -> bool;

    fn get_xml_version(&self) -> Option<String>;

    fn has_focus(&self) -> bool;

    fn import_node<P: IsA<DOMNode>>(&self, importedNode: &P, deep: bool) -> Result<DOMNode, Error>;

    fn query_command_enabled(&self, command: &str) -> bool;

    fn query_command_indeterm(&self, command: &str) -> bool;

    fn query_command_state(&self, command: &str) -> bool;

    fn query_command_supported(&self, command: &str) -> bool;

    fn query_command_value(&self, command: &str) -> Option<String>;

    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error>;

    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error>;

    fn set_body<P: IsA<DOMHTMLElement>>(&self, value: &P) -> Result<(), Error>;

    fn set_charset(&self, value: &str);

    fn set_cookie(&self, value: &str) -> Result<(), Error>;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn set_design_mode(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_dir(&self, value: &str);

    fn set_document_uri(&self, value: &str);

    fn set_selected_stylesheet_set(&self, value: &str);

    fn set_title(&self, value: &str);

    fn set_xml_standalone(&self, value: bool) -> Result<(), Error>;

    fn set_xml_version(&self, value: &str) -> Result<(), Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn webkit_cancel_fullscreen(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn webkit_exit_fullscreen(&self);

    fn get_property_child_element_count(&self) -> libc::c_ulong;

    fn get_property_children(&self) -> Option<DOMHTMLCollection>;

    fn get_property_compat_mode(&self) -> Option<String>;

    fn get_property_content_type(&self) -> Option<String>;

    fn get_property_current_script(&self) -> Option<DOMHTMLScriptElement>;

    fn get_property_design_mode(&self) -> Option<String>;

    fn set_property_design_mode(&self, design_mode: Option<&str>);

    fn get_property_dir(&self) -> Option<String>;

    fn set_property_dir(&self, dir: Option<&str>);

    fn get_property_embeds(&self) -> Option<DOMHTMLCollection>;

    fn get_property_first_element_child(&self) -> Option<DOMElement>;

    fn get_property_hidden(&self) -> bool;

    fn get_property_last_element_child(&self) -> Option<DOMElement>;

    fn get_property_origin(&self) -> Option<String>;

    fn get_property_plugins(&self) -> Option<DOMHTMLCollection>;

    fn get_property_pointer_lock_element(&self) -> Option<DOMElement>;

    fn get_property_scripts(&self) -> Option<DOMHTMLCollection>;

    fn get_property_scrolling_element(&self) -> Option<DOMElement>;

    fn get_property_visibility_state(&self) -> Option<String>;

    fn get_property_webkit_current_full_screen_element(&self) -> Option<DOMElement>;

    fn get_property_webkit_full_screen_keyboard_input_allowed(&self) -> bool;

    fn get_property_webkit_fullscreen_element(&self) -> Option<DOMElement>;

    fn get_property_webkit_fullscreen_enabled(&self) -> bool;

    fn get_property_webkit_is_full_screen(&self) -> bool;

    fn connect_property_active_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_anchors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_applets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_body_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_character_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_charset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_child_element_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_children_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_compat_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_content_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cookie_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_current_script_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_design_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_doctype_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_document_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_document_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_domain_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_embeds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_first_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_forms_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_head_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_images_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_implementation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_last_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_last_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_links_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_origin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_plugins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pointer_lock_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_preferred_stylesheet_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ready_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_referrer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scripts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scrolling_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_selected_stylesheet_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_style_sheets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visibility_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkit_current_full_screen_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkit_full_screen_keyboard_input_allowed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkit_fullscreen_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkit_fullscreen_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkit_is_full_screen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_xml_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_xml_standalone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_xml_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDocument> + IsA<glib::object::Object>> DOMDocumentExt for O {
    fn adopt_node<P: IsA<DOMNode>>(&self, source: &P) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_adopt_node(self.to_glib_none().0, source.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn caret_range_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMRange> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_caret_range_from_point(self.to_glib_none().0, x, y))
        }
    }

    fn create_attribute(&self, name: &str) -> Result<DOMAttr, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_attribute(self.to_glib_none().0, name.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_attribute_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMAttr, Error> {
        let namespaceURI = namespaceURI.into();
        let namespaceURI = namespaceURI.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_attribute_ns(self.to_glib_none().0, namespaceURI.0, qualifiedName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_cdata_section(&self, data: &str) -> Result<DOMCDATASection, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_cdata_section(self.to_glib_none().0, data.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_comment(&self, data: &str) -> Option<DOMComment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_comment(self.to_glib_none().0, data.to_glib_none().0))
        }
    }

    fn create_css_style_declaration(&self) -> Option<DOMCSSStyleDeclaration> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_create_css_style_declaration(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn create_document_fragment(&self) -> Option<DOMDocumentFragment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_document_fragment(self.to_glib_none().0))
        }
    }

    fn create_element(&self, tagName: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_element(self.to_glib_none().0, tagName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_element_ns<'a, P: Into<Option<&'a str>>>(&self, namespaceURI: P, qualifiedName: &str) -> Result<DOMElement, Error> {
        let namespaceURI = namespaceURI.into();
        let namespaceURI = namespaceURI.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_element_ns(self.to_glib_none().0, namespaceURI.0, qualifiedName.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_entity_reference<'a, P: Into<Option<&'a str>>>(&self, name: P) -> Result<DOMEntityReference, Error> {
        let name = name.into();
        let name = name.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_entity_reference(self.to_glib_none().0, name.0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_event(&self, eventType: &str) -> Result<DOMEvent, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_event(self.to_glib_none().0, eventType.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn create_expression<P: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, resolver: &P) -> Result<DOMXPathExpression, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_expression() }
    //}

    //fn create_node_iterator<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMNodeIterator, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_node_iterator() }
    //}

    //fn create_ns_resolver<P: IsA<DOMNode>>(&self, nodeResolver: &P) -> /*Ignored*/Option<DOMXPathNSResolver> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_ns_resolver() }
    //}

    fn create_processing_instruction(&self, target: &str, data: &str) -> Result<DOMProcessingInstruction, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_create_processing_instruction(self.to_glib_none().0, target.to_glib_none().0, data.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn create_range(&self) -> Option<DOMRange> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_create_range(self.to_glib_none().0))
        }
    }

    fn create_text_node(&self, data: &str) -> Option<DOMText> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_text_node(self.to_glib_none().0, data.to_glib_none().0))
        }
    }

    //fn create_tree_walker<'a, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMNodeFilter> + 'a, R: Into<Option<&'a Q>>>(&self, root: &P, whatToShow: libc::c_ulong, filter: R, expandEntityReferences: bool) -> Result<DOMTreeWalker, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_tree_walker() }
    //}

    fn element_from_point(&self, x: libc::c_long, y: libc::c_long) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_element_from_point(self.to_glib_none().0, x, y))
        }
    }

    //fn evaluate<'a, 'b, P: IsA<DOMNode>, Q: IsA</*Ignored*/DOMXPathNSResolver> + 'a, R: Into<Option<&'a Q>>, S: Into<Option<&'b DOMXPathResult>>>(&self, expression: &str, contextNode: &P, resolver: R, type_: libc::c_ushort, inResult: S) -> Result<DOMXPathResult, Error> {
    //    unsafe { TODO: call ffi::webkit_dom_document_evaluate() }
    //}

    fn exec_command(&self, command: &str, userInterface: bool, value: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_exec_command(self.to_glib_none().0, command.to_glib_none().0, userInterface.to_glib(), value.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn exit_pointer_lock(&self) {
        unsafe {
            ffi::webkit_dom_document_exit_pointer_lock(self.to_glib_none().0);
        }
    }

    fn get_active_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_active_element(self.to_glib_none().0))
        }
    }

    fn get_anchors(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_anchors(self.to_glib_none().0))
        }
    }

    fn get_applets(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_applets(self.to_glib_none().0))
        }
    }

    fn get_body(&self) -> Option<DOMHTMLElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_body(self.to_glib_none().0))
        }
    }

    fn get_character_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_character_set(self.to_glib_none().0))
        }
    }

    fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_charset(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_document_get_child_element_count(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_children(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_compat_mode(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_compat_mode(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_content_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_content_type(self.to_glib_none().0))
        }
    }

    fn get_cookie(&self) -> Result<String, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_get_cookie(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_current_script(&self) -> Option<DOMHTMLScriptElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_current_script(self.to_glib_none().0))
        }
    }

    fn get_default_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_charset(self.to_glib_none().0))
        }
    }

    fn get_default_view(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_view(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_design_mode(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_design_mode(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_dir(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_dir(self.to_glib_none().0))
        }
    }

    fn get_doctype(&self) -> Option<DOMDocumentType> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_doctype(self.to_glib_none().0))
        }
    }

    fn get_document_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_document_element(self.to_glib_none().0))
        }
    }

    fn get_document_uri(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_document_uri(self.to_glib_none().0))
        }
    }

    fn get_domain(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_domain(self.to_glib_none().0))
        }
    }

    fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_element_by_id(self.to_glib_none().0, elementId.to_glib_none().0))
        }
    }

    fn get_elements_by_class_name(&self, class_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_class_name(self.to_glib_none().0, class_name.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_class_name_as_html_collection(&self, classNames: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_class_name_as_html_collection(self.to_glib_none().0, classNames.to_glib_none().0))
        }
    }

    fn get_elements_by_name(&self, elementName: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_name(self.to_glib_none().0, elementName.to_glib_none().0))
        }
    }

    fn get_elements_by_tag_name(&self, tag_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name(self.to_glib_none().0, tag_name.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_tag_name_as_html_collection(&self, tagname: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_as_html_collection(self.to_glib_none().0, tagname.to_glib_none().0))
        }
    }

    fn get_elements_by_tag_name_ns(&self, namespace_uri: &str, tag_name: &str) -> Option<DOMNodeList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_ns(self.to_glib_none().0, namespace_uri.to_glib_none().0, tag_name.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_elements_by_tag_name_ns_as_html_collection(&self, namespaceURI: &str, localName: &str) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_elements_by_tag_name_ns_as_html_collection(self.to_glib_none().0, namespaceURI.to_glib_none().0, localName.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_embeds(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_embeds(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_first_element_child(self.to_glib_none().0))
        }
    }

    fn get_forms(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_forms(self.to_glib_none().0))
        }
    }

    fn get_head(&self) -> Option<DOMHTMLHeadElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_head(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_hidden(self.to_glib_none().0))
        }
    }

    fn get_images(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_images(self.to_glib_none().0))
        }
    }

    fn get_implementation(&self) -> Option<DOMDOMImplementation> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_implementation(self.to_glib_none().0))
        }
    }

    fn get_input_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_input_encoding(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_last_element_child(self.to_glib_none().0))
        }
    }

    fn get_last_modified(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_last_modified(self.to_glib_none().0))
        }
    }

    fn get_links(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_links(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_origin(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_origin(self.to_glib_none().0))
        }
    }

    fn get_override_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration> {
        let pseudoElement = pseudoElement.into();
        let pseudoElement = pseudoElement.to_glib_none();
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_override_style(self.to_glib_none().0, element.to_glib_none().0, pseudoElement.0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_plugins(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_plugins(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_pointer_lock_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_pointer_lock_element(self.to_glib_none().0))
        }
    }

    fn get_preferred_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_preferred_stylesheet_set(self.to_glib_none().0))
        }
    }

    fn get_ready_state(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_ready_state(self.to_glib_none().0))
        }
    }

    fn get_referrer(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_referrer(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_scripts(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_scripts(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scrolling_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_scrolling_element(self.to_glib_none().0))
        }
    }

    fn get_selected_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_selected_stylesheet_set(self.to_glib_none().0))
        }
    }

    fn get_style_sheets(&self) -> Option<DOMStyleSheetList> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_style_sheets(self.to_glib_none().0))
        }
    }

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_title(self.to_glib_none().0))
        }
    }

    fn get_url(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_url(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_visibility_state(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_visibility_state(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_current_fullscreen_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_webkit_current_fullscreen_element(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_webkit_fullscreen_element(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_fullscreen_enabled(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_fullscreen_keyboard_input_allowed(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_fullscreen_keyboard_input_allowed(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkit_is_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_webkit_is_fullscreen(self.to_glib_none().0))
        }
    }

    fn get_xml_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_encoding(self.to_glib_none().0))
        }
    }

    fn get_xml_standalone(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_xml_standalone(self.to_glib_none().0))
        }
    }

    fn get_xml_version(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_version(self.to_glib_none().0))
        }
    }

    fn has_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_has_focus(self.to_glib_none().0))
        }
    }

    fn import_node<P: IsA<DOMNode>>(&self, importedNode: &P, deep: bool) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_import_node(self.to_glib_none().0, importedNode.to_glib_none().0, deep.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn query_command_enabled(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_enabled(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_indeterm(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_indeterm(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_state(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_state(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_supported(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_supported(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_command_value(&self, command: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_query_command_value(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    fn query_selector(&self, selectors: &str) -> Result<DOMElement, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_query_selector(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn query_selector_all(&self, selectors: &str) -> Result<DOMNodeList, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_document_query_selector_all(self.to_glib_none().0, selectors.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_body<P: IsA<DOMHTMLElement>>(&self, value: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_body(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_charset(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_charset(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_cookie(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_cookie(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn set_design_mode(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_design_mode(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_dir(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_dir(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_document_uri(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_document_uri(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_selected_stylesheet_set(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_selected_stylesheet_set(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_title(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_xml_standalone(&self, value: bool) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_xml_standalone(self.to_glib_none().0, value.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_xml_version(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_document_set_xml_version(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn webkit_cancel_fullscreen(&self) {
        unsafe {
            ffi::webkit_dom_document_webkit_cancel_fullscreen(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn webkit_exit_fullscreen(&self) {
        unsafe {
            ffi::webkit_dom_document_webkit_exit_fullscreen(self.to_glib_none().0);
        }
    }

    fn get_property_child_element_count(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "child-element-count".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLCollection as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "children".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_compat_mode(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "compat-mode".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_content_type(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "content-type".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_current_script(&self) -> Option<DOMHTMLScriptElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLScriptElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "current-script".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_design_mode(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "design-mode".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_design_mode(&self, design_mode: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "design-mode".to_glib_none().0, Value::from(design_mode).to_glib_none().0);
        }
    }

    fn get_property_dir(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "dir".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_dir(&self, dir: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "dir".to_glib_none().0, Value::from(dir).to_glib_none().0);
        }
    }

    fn get_property_embeds(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLCollection as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "embeds".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_first_element_child(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "first-element-child".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_hidden(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hidden".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_last_element_child(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "last-element-child".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_origin(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "origin".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_plugins(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLCollection as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "plugins".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_pointer_lock_element(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pointer-lock-element".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_scripts(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMHTMLCollection as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scripts".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_scrolling_element(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scrolling-element".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_visibility_state(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "visibility-state".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_webkit_current_full_screen_element(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-current-full-screen-element".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_webkit_full_screen_keyboard_input_allowed(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-full-screen-keyboard-input-allowed".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_webkit_fullscreen_element(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-fullscreen-element".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_webkit_fullscreen_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-fullscreen-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_webkit_is_full_screen(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkit-is-full-screen".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_property_active_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active-element",
                transmute(notify_active_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_anchors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::anchors",
                transmute(notify_anchors_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_applets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::applets",
                transmute(notify_applets_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_body_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::body",
                transmute(notify_body_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_character_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::character-set",
                transmute(notify_character_set_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_charset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::charset",
                transmute(notify_charset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_child_element_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::child-element-count",
                transmute(notify_child_element_count_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_children_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::children",
                transmute(notify_children_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_compat_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::compat-mode",
                transmute(notify_compat_mode_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_content_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::content-type",
                transmute(notify_content_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_cookie_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::cookie",
                transmute(notify_cookie_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_current_script_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::current-script",
                transmute(notify_current_script_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_default_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::default-view",
                transmute(notify_default_view_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_design_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::design-mode",
                transmute(notify_design_mode_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dir",
                transmute(notify_dir_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_doctype_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::doctype",
                transmute(notify_doctype_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_document_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::document-element",
                transmute(notify_document_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_document_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::document-uri",
                transmute(notify_document_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_domain_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::domain",
                transmute(notify_domain_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_embeds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::embeds",
                transmute(notify_embeds_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_first_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::first-element-child",
                transmute(notify_first_element_child_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_forms_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::forms",
                transmute(notify_forms_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_head_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::head",
                transmute(notify_head_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::hidden",
                transmute(notify_hidden_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_images_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::images",
                transmute(notify_images_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_implementation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::implementation",
                transmute(notify_implementation_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_input_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::input-encoding",
                transmute(notify_input_encoding_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_last_element_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::last-element-child",
                transmute(notify_last_element_child_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_last_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::last-modified",
                transmute(notify_last_modified_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_links_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::links",
                transmute(notify_links_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_origin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::origin",
                transmute(notify_origin_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_plugins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::plugins",
                transmute(notify_plugins_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_pointer_lock_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::pointer-lock-element",
                transmute(notify_pointer_lock_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_preferred_stylesheet_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::preferred-stylesheet-set",
                transmute(notify_preferred_stylesheet_set_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_ready_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::ready-state",
                transmute(notify_ready_state_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_referrer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::referrer",
                transmute(notify_referrer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_scripts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::scripts",
                transmute(notify_scripts_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_scrolling_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::scrolling-element",
                transmute(notify_scrolling_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_selected_stylesheet_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::selected-stylesheet-set",
                transmute(notify_selected_stylesheet_set_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_style_sheets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::style-sheets",
                transmute(notify_style_sheets_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::title",
                transmute(notify_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::url",
                transmute(notify_url_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_visibility_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::visibility-state",
                transmute(notify_visibility_state_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkit_current_full_screen_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkit-current-full-screen-element",
                transmute(notify_webkit_current_full_screen_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkit_full_screen_keyboard_input_allowed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkit-full-screen-keyboard-input-allowed",
                transmute(notify_webkit_full_screen_keyboard_input_allowed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkit_fullscreen_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkit-fullscreen-element",
                transmute(notify_webkit_fullscreen_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkit_fullscreen_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkit-fullscreen-enabled",
                transmute(notify_webkit_fullscreen_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkit_is_full_screen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkit-is-full-screen",
                transmute(notify_webkit_is_full_screen_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_xml_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::xml-encoding",
                transmute(notify_xml_encoding_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_xml_standalone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::xml-standalone",
                transmute(notify_xml_standalone_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_xml_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::xml-version",
                transmute(notify_xml_version_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_active_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_anchors_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_applets_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_body_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_character_set_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_charset_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_child_element_count_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_children_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_compat_mode_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_content_type_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_cookie_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_current_script_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_default_view_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_design_mode_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dir_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_doctype_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_document_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_document_uri_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_domain_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_embeds_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_first_element_child_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_forms_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_head_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hidden_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_images_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_implementation_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_input_encoding_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_last_element_child_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_last_modified_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_links_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_origin_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_plugins_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_pointer_lock_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_preferred_stylesheet_set_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ready_state_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_referrer_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_scripts_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_scrolling_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_selected_stylesheet_set_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_style_sheets_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_title_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_url_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_visibility_state_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkit_current_full_screen_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkit_full_screen_keyboard_input_allowed_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkit_fullscreen_element_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkit_fullscreen_enabled_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkit_is_full_screen_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_xml_encoding_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_xml_standalone_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_xml_version_trampoline<P>(this: *mut ffi::WebKitDOMDocument, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocument> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocument::from_glib_borrow(this).downcast_unchecked())
}
