// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMHTMLBodyElement(Object<ffi::WebKitDOMHTMLBodyElement, ffi::WebKitDOMHTMLBodyElementClass>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_body_element_get_type(),
    }
}

pub trait DOMHTMLBodyElementExt {
    fn get_a_link(&self) -> Option<String>;

    fn get_background(&self) -> Option<String>;

    fn get_bg_color(&self) -> Option<String>;

    fn get_link(&self) -> Option<String>;

    fn get_text(&self) -> Option<String>;

    fn get_v_link(&self) -> Option<String>;

    fn set_a_link(&self, value: &str);

    fn set_background(&self, value: &str);

    fn set_bg_color(&self, value: &str);

    fn set_link(&self, value: &str);

    fn set_text(&self, value: &str);

    fn set_v_link(&self, value: &str);

    fn connect_property_a_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_v_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLBodyElement> + IsA<glib::object::Object>> DOMHTMLBodyElementExt for O {
    fn get_a_link(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_a_link(self.to_glib_none().0))
        }
    }

    fn get_background(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_background(self.to_glib_none().0))
        }
    }

    fn get_bg_color(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_bg_color(self.to_glib_none().0))
        }
    }

    fn get_link(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_link(self.to_glib_none().0))
        }
    }

    fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_text(self.to_glib_none().0))
        }
    }

    fn get_v_link(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_v_link(self.to_glib_none().0))
        }
    }

    fn set_a_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_a_link(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_background(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_background(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_bg_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_bg_color(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_link(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_text(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_text(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_v_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_v_link(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_property_a_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::a-link",
                transmute(notify_a_link_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::background",
                transmute(notify_background_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::bg-color",
                transmute(notify_bg_color_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::link",
                transmute(notify_link_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::text",
                transmute(notify_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_v_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::v-link",
                transmute(notify_v_link_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_a_link_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_background_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_bg_color_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_link_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_text_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_v_link_trampoline<P>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLBodyElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLBodyElement::from_glib_borrow(this).downcast_unchecked())
}
