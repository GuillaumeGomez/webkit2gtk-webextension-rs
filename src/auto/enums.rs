// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use std::fmt;
use webkit2_webextension_sys;

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum ConsoleMessageLevel {
    Info,
    Log,
    Warning,
    Error,
    Debug,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl fmt::Display for ConsoleMessageLevel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ConsoleMessageLevel::{}",
            match *self {
                ConsoleMessageLevel::Info => "Info",
                ConsoleMessageLevel::Log => "Log",
                ConsoleMessageLevel::Warning => "Warning",
                ConsoleMessageLevel::Error => "Error",
                ConsoleMessageLevel::Debug => "Debug",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for ConsoleMessageLevel {
    type GlibType = webkit2_webextension_sys::WebKitConsoleMessageLevel;

    fn to_glib(&self) -> webkit2_webextension_sys::WebKitConsoleMessageLevel {
        match *self {
            ConsoleMessageLevel::Info => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_LEVEL_INFO
            }
            ConsoleMessageLevel::Log => webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_LEVEL_LOG,
            ConsoleMessageLevel::Warning => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_LEVEL_WARNING
            }
            ConsoleMessageLevel::Error => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_LEVEL_ERROR
            }
            ConsoleMessageLevel::Debug => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_LEVEL_DEBUG
            }
            ConsoleMessageLevel::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<webkit2_webextension_sys::WebKitConsoleMessageLevel> for ConsoleMessageLevel {
    fn from_glib(value: webkit2_webextension_sys::WebKitConsoleMessageLevel) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ConsoleMessageLevel::Info,
            1 => ConsoleMessageLevel::Log,
            2 => ConsoleMessageLevel::Warning,
            3 => ConsoleMessageLevel::Error,
            4 => ConsoleMessageLevel::Debug,
            value => ConsoleMessageLevel::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl StaticType for ConsoleMessageLevel {
    fn static_type() -> Type {
        unsafe { from_glib(webkit2_webextension_sys::webkit_console_message_level_get_type()) }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl<'a> FromValueOptional<'a> for ConsoleMessageLevel {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl<'a> FromValue<'a> for ConsoleMessageLevel {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl SetValue for ConsoleMessageLevel {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum ConsoleMessageSource {
    Javascript,
    Network,
    ConsoleApi,
    Security,
    Other,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl fmt::Display for ConsoleMessageSource {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ConsoleMessageSource::{}",
            match *self {
                ConsoleMessageSource::Javascript => "Javascript",
                ConsoleMessageSource::Network => "Network",
                ConsoleMessageSource::ConsoleApi => "ConsoleApi",
                ConsoleMessageSource::Security => "Security",
                ConsoleMessageSource::Other => "Other",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for ConsoleMessageSource {
    type GlibType = webkit2_webextension_sys::WebKitConsoleMessageSource;

    fn to_glib(&self) -> webkit2_webextension_sys::WebKitConsoleMessageSource {
        match *self {
            ConsoleMessageSource::Javascript => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_SOURCE_JAVASCRIPT
            }
            ConsoleMessageSource::Network => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_SOURCE_NETWORK
            }
            ConsoleMessageSource::ConsoleApi => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_SOURCE_CONSOLE_API
            }
            ConsoleMessageSource::Security => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_SOURCE_SECURITY
            }
            ConsoleMessageSource::Other => {
                webkit2_webextension_sys::WEBKIT_CONSOLE_MESSAGE_SOURCE_OTHER
            }
            ConsoleMessageSource::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<webkit2_webextension_sys::WebKitConsoleMessageSource> for ConsoleMessageSource {
    fn from_glib(value: webkit2_webextension_sys::WebKitConsoleMessageSource) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ConsoleMessageSource::Javascript,
            1 => ConsoleMessageSource::Network,
            2 => ConsoleMessageSource::ConsoleApi,
            3 => ConsoleMessageSource::Security,
            4 => ConsoleMessageSource::Other,
            value => ConsoleMessageSource::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl StaticType for ConsoleMessageSource {
    fn static_type() -> Type {
        unsafe { from_glib(webkit2_webextension_sys::webkit_console_message_source_get_type()) }
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl<'a> FromValueOptional<'a> for ConsoleMessageSource {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl<'a> FromValue<'a> for ConsoleMessageSource {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v2_12", feature = "dox"))]
impl SetValue for ConsoleMessageSource {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum ContextMenuAction {
    NoAction,
    OpenLink,
    OpenLinkInNewWindow,
    DownloadLinkToDisk,
    CopyLinkToClipboard,
    OpenImageInNewWindow,
    DownloadImageToDisk,
    CopyImageToClipboard,
    CopyImageUrlToClipboard,
    OpenFrameInNewWindow,
    GoBack,
    GoForward,
    Stop,
    Reload,
    Copy,
    Cut,
    Paste,
    Delete,
    SelectAll,
    InputMethods,
    Unicode,
    SpellingGuess,
    NoGuessesFound,
    IgnoreSpelling,
    LearnSpelling,
    IgnoreGrammar,
    FontMenu,
    Bold,
    Italic,
    Underline,
    Outline,
    InspectElement,
    OpenVideoInNewWindow,
    OpenAudioInNewWindow,
    CopyVideoLinkToClipboard,
    CopyAudioLinkToClipboard,
    ToggleMediaControls,
    ToggleMediaLoop,
    EnterVideoFullscreen,
    MediaPlay,
    MediaPause,
    MediaMute,
    DownloadVideoToDisk,
    DownloadAudioToDisk,
    InsertEmoji,
    PasteAsPlainText,
    Custom,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ContextMenuAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ContextMenuAction::{}",
            match *self {
                ContextMenuAction::NoAction => "NoAction",
                ContextMenuAction::OpenLink => "OpenLink",
                ContextMenuAction::OpenLinkInNewWindow => "OpenLinkInNewWindow",
                ContextMenuAction::DownloadLinkToDisk => "DownloadLinkToDisk",
                ContextMenuAction::CopyLinkToClipboard => "CopyLinkToClipboard",
                ContextMenuAction::OpenImageInNewWindow => "OpenImageInNewWindow",
                ContextMenuAction::DownloadImageToDisk => "DownloadImageToDisk",
                ContextMenuAction::CopyImageToClipboard => "CopyImageToClipboard",
                ContextMenuAction::CopyImageUrlToClipboard => "CopyImageUrlToClipboard",
                ContextMenuAction::OpenFrameInNewWindow => "OpenFrameInNewWindow",
                ContextMenuAction::GoBack => "GoBack",
                ContextMenuAction::GoForward => "GoForward",
                ContextMenuAction::Stop => "Stop",
                ContextMenuAction::Reload => "Reload",
                ContextMenuAction::Copy => "Copy",
                ContextMenuAction::Cut => "Cut",
                ContextMenuAction::Paste => "Paste",
                ContextMenuAction::Delete => "Delete",
                ContextMenuAction::SelectAll => "SelectAll",
                ContextMenuAction::InputMethods => "InputMethods",
                ContextMenuAction::Unicode => "Unicode",
                ContextMenuAction::SpellingGuess => "SpellingGuess",
                ContextMenuAction::NoGuessesFound => "NoGuessesFound",
                ContextMenuAction::IgnoreSpelling => "IgnoreSpelling",
                ContextMenuAction::LearnSpelling => "LearnSpelling",
                ContextMenuAction::IgnoreGrammar => "IgnoreGrammar",
                ContextMenuAction::FontMenu => "FontMenu",
                ContextMenuAction::Bold => "Bold",
                ContextMenuAction::Italic => "Italic",
                ContextMenuAction::Underline => "Underline",
                ContextMenuAction::Outline => "Outline",
                ContextMenuAction::InspectElement => "InspectElement",
                ContextMenuAction::OpenVideoInNewWindow => "OpenVideoInNewWindow",
                ContextMenuAction::OpenAudioInNewWindow => "OpenAudioInNewWindow",
                ContextMenuAction::CopyVideoLinkToClipboard => "CopyVideoLinkToClipboard",
                ContextMenuAction::CopyAudioLinkToClipboard => "CopyAudioLinkToClipboard",
                ContextMenuAction::ToggleMediaControls => "ToggleMediaControls",
                ContextMenuAction::ToggleMediaLoop => "ToggleMediaLoop",
                ContextMenuAction::EnterVideoFullscreen => "EnterVideoFullscreen",
                ContextMenuAction::MediaPlay => "MediaPlay",
                ContextMenuAction::MediaPause => "MediaPause",
                ContextMenuAction::MediaMute => "MediaMute",
                ContextMenuAction::DownloadVideoToDisk => "DownloadVideoToDisk",
                ContextMenuAction::DownloadAudioToDisk => "DownloadAudioToDisk",
                ContextMenuAction::InsertEmoji => "InsertEmoji",
                ContextMenuAction::PasteAsPlainText => "PasteAsPlainText",
                ContextMenuAction::Custom => "Custom",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for ContextMenuAction {
    type GlibType = webkit2_webextension_sys::WebKitContextMenuAction;

    fn to_glib(&self) -> webkit2_webextension_sys::WebKitContextMenuAction {
        match *self {
            ContextMenuAction::NoAction => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION
            }
            ContextMenuAction::OpenLink => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK
            }
            ContextMenuAction::OpenLinkInNewWindow => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW
            }
            ContextMenuAction::DownloadLinkToDisk => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK
            }
            ContextMenuAction::CopyLinkToClipboard => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD
            }
            ContextMenuAction::OpenImageInNewWindow => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW
            }
            ContextMenuAction::DownloadImageToDisk => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK
            }
            ContextMenuAction::CopyImageToClipboard => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD
            }
            ContextMenuAction::CopyImageUrlToClipboard => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD
            }
            ContextMenuAction::OpenFrameInNewWindow => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW
            }
            ContextMenuAction::GoBack => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_GO_BACK
            }
            ContextMenuAction::GoForward => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD
            }
            ContextMenuAction::Stop => webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_STOP,
            ContextMenuAction::Reload => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_RELOAD
            }
            ContextMenuAction::Copy => webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY,
            ContextMenuAction::Cut => webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_CUT,
            ContextMenuAction::Paste => webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_PASTE,
            ContextMenuAction::Delete => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_DELETE
            }
            ContextMenuAction::SelectAll => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL
            }
            ContextMenuAction::InputMethods => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS
            }
            ContextMenuAction::Unicode => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_UNICODE
            }
            ContextMenuAction::SpellingGuess => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS
            }
            ContextMenuAction::NoGuessesFound => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND
            }
            ContextMenuAction::IgnoreSpelling => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING
            }
            ContextMenuAction::LearnSpelling => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING
            }
            ContextMenuAction::IgnoreGrammar => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR
            }
            ContextMenuAction::FontMenu => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU
            }
            ContextMenuAction::Bold => webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_BOLD,
            ContextMenuAction::Italic => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_ITALIC
            }
            ContextMenuAction::Underline => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE
            }
            ContextMenuAction::Outline => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OUTLINE
            }
            ContextMenuAction::InspectElement => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT
            }
            ContextMenuAction::OpenVideoInNewWindow => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_VIDEO_IN_NEW_WINDOW
            }
            ContextMenuAction::OpenAudioInNewWindow => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_OPEN_AUDIO_IN_NEW_WINDOW
            }
            ContextMenuAction::CopyVideoLinkToClipboard => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY_VIDEO_LINK_TO_CLIPBOARD
            }
            ContextMenuAction::CopyAudioLinkToClipboard => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_COPY_AUDIO_LINK_TO_CLIPBOARD
            }
            ContextMenuAction::ToggleMediaControls => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS
            }
            ContextMenuAction::ToggleMediaLoop => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP
            }
            ContextMenuAction::EnterVideoFullscreen => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN
            }
            ContextMenuAction::MediaPlay => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY
            }
            ContextMenuAction::MediaPause => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PAUSE
            }
            ContextMenuAction::MediaMute => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE
            }
            ContextMenuAction::DownloadVideoToDisk => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_VIDEO_TO_DISK
            }
            ContextMenuAction::DownloadAudioToDisk => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_AUDIO_TO_DISK
            }
            ContextMenuAction::InsertEmoji => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_INSERT_EMOJI
            }
            ContextMenuAction::PasteAsPlainText => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_PASTE_AS_PLAIN_TEXT
            }
            ContextMenuAction::Custom => {
                webkit2_webextension_sys::WEBKIT_CONTEXT_MENU_ACTION_CUSTOM
            }
            ContextMenuAction::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<webkit2_webextension_sys::WebKitContextMenuAction> for ContextMenuAction {
    fn from_glib(value: webkit2_webextension_sys::WebKitContextMenuAction) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ContextMenuAction::NoAction,
            1 => ContextMenuAction::OpenLink,
            2 => ContextMenuAction::OpenLinkInNewWindow,
            3 => ContextMenuAction::DownloadLinkToDisk,
            4 => ContextMenuAction::CopyLinkToClipboard,
            5 => ContextMenuAction::OpenImageInNewWindow,
            6 => ContextMenuAction::DownloadImageToDisk,
            7 => ContextMenuAction::CopyImageToClipboard,
            8 => ContextMenuAction::CopyImageUrlToClipboard,
            9 => ContextMenuAction::OpenFrameInNewWindow,
            10 => ContextMenuAction::GoBack,
            11 => ContextMenuAction::GoForward,
            12 => ContextMenuAction::Stop,
            13 => ContextMenuAction::Reload,
            14 => ContextMenuAction::Copy,
            15 => ContextMenuAction::Cut,
            16 => ContextMenuAction::Paste,
            17 => ContextMenuAction::Delete,
            18 => ContextMenuAction::SelectAll,
            19 => ContextMenuAction::InputMethods,
            20 => ContextMenuAction::Unicode,
            21 => ContextMenuAction::SpellingGuess,
            22 => ContextMenuAction::NoGuessesFound,
            23 => ContextMenuAction::IgnoreSpelling,
            24 => ContextMenuAction::LearnSpelling,
            25 => ContextMenuAction::IgnoreGrammar,
            26 => ContextMenuAction::FontMenu,
            27 => ContextMenuAction::Bold,
            28 => ContextMenuAction::Italic,
            29 => ContextMenuAction::Underline,
            30 => ContextMenuAction::Outline,
            31 => ContextMenuAction::InspectElement,
            32 => ContextMenuAction::OpenVideoInNewWindow,
            33 => ContextMenuAction::OpenAudioInNewWindow,
            34 => ContextMenuAction::CopyVideoLinkToClipboard,
            35 => ContextMenuAction::CopyAudioLinkToClipboard,
            36 => ContextMenuAction::ToggleMediaControls,
            37 => ContextMenuAction::ToggleMediaLoop,
            38 => ContextMenuAction::EnterVideoFullscreen,
            39 => ContextMenuAction::MediaPlay,
            40 => ContextMenuAction::MediaPause,
            41 => ContextMenuAction::MediaMute,
            42 => ContextMenuAction::DownloadVideoToDisk,
            43 => ContextMenuAction::DownloadAudioToDisk,
            44 => ContextMenuAction::InsertEmoji,
            45 => ContextMenuAction::PasteAsPlainText,
            10000 => ContextMenuAction::Custom,
            value => ContextMenuAction::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum FormSubmissionStep {
    SendDomEvent,
    Complete,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
impl fmt::Display for FormSubmissionStep {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FormSubmissionStep::{}",
            match *self {
                FormSubmissionStep::SendDomEvent => "SendDomEvent",
                FormSubmissionStep::Complete => "Complete",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for FormSubmissionStep {
    type GlibType = webkit2_webextension_sys::WebKitFormSubmissionStep;

    fn to_glib(&self) -> webkit2_webextension_sys::WebKitFormSubmissionStep {
        match *self {
            FormSubmissionStep::SendDomEvent => {
                webkit2_webextension_sys::WEBKIT_FORM_SUBMISSION_WILL_SEND_DOM_EVENT
            }
            FormSubmissionStep::Complete => {
                webkit2_webextension_sys::WEBKIT_FORM_SUBMISSION_WILL_COMPLETE
            }
            FormSubmissionStep::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<webkit2_webextension_sys::WebKitFormSubmissionStep> for FormSubmissionStep {
    fn from_glib(value: webkit2_webextension_sys::WebKitFormSubmissionStep) -> Self {
        skip_assert_initialized!();
        match value {
            0 => FormSubmissionStep::SendDomEvent,
            1 => FormSubmissionStep::Complete,
            value => FormSubmissionStep::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
impl StaticType for FormSubmissionStep {
    fn static_type() -> Type {
        unsafe { from_glib(webkit2_webextension_sys::webkit_form_submission_step_get_type()) }
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
impl<'a> FromValueOptional<'a> for FormSubmissionStep {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
impl<'a> FromValue<'a> for FormSubmissionStep {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v2_20", feature = "dox"))]
impl SetValue for FormSubmissionStep {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[cfg(any(feature = "v2_28", feature = "dox"))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum UserMessageError {
    UserMessageUnhandledMessage,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v2_28", feature = "dox"))]
impl fmt::Display for UserMessageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "UserMessageError::{}",
            match *self {
                UserMessageError::UserMessageUnhandledMessage => "UserMessageUnhandledMessage",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v2_28", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for UserMessageError {
    type GlibType = webkit2_webextension_sys::WebKitUserMessageError;

    fn to_glib(&self) -> webkit2_webextension_sys::WebKitUserMessageError {
        match *self {
            UserMessageError::UserMessageUnhandledMessage => {
                webkit2_webextension_sys::WEBKIT_USER_MESSAGE_UNHANDLED_MESSAGE
            }
            UserMessageError::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v2_28", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<webkit2_webextension_sys::WebKitUserMessageError> for UserMessageError {
    fn from_glib(value: webkit2_webextension_sys::WebKitUserMessageError) -> Self {
        skip_assert_initialized!();
        match value {
            0 => UserMessageError::UserMessageUnhandledMessage,
            value => UserMessageError::__Unknown(value),
        }
    }
}
