// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use DOMNode;
use DOMObject;
use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DOMNodeIterator(Object<ffi::WebKitDOMNodeIterator>): DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_node_iterator_get_type(),
    }
}

pub trait DOMNodeIteratorExt {
    fn detach(&self);

    fn get_expand_entity_references(&self) -> bool;

    //fn get_filter(&self) -> /*Ignored*/Option<DOMNodeFilter>;

    fn get_pointer_before_reference_node(&self) -> bool;

    fn get_reference_node(&self) -> Option<DOMNode>;

    fn get_root(&self) -> Option<DOMNode>;

    fn get_what_to_show(&self) -> libc::c_ulong;

    fn next_node(&self) -> Result<DOMNode, Error>;

    fn previous_node(&self) -> Result<DOMNode, Error>;
}

impl<O: IsA<DOMNodeIterator>> DOMNodeIteratorExt for O {
    fn detach(&self) {
        unsafe {
            ffi::webkit_dom_node_iterator_detach(self.to_glib_none().0);
        }
    }

    fn get_expand_entity_references(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_node_iterator_get_expand_entity_references(self.to_glib_none().0))
        }
    }

    //fn get_filter(&self) -> /*Ignored*/Option<DOMNodeFilter> {
    //    unsafe { TODO: call ffi::webkit_dom_node_iterator_get_filter() }
    //}

    fn get_pointer_before_reference_node(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_node_iterator_get_pointer_before_reference_node(self.to_glib_none().0))
        }
    }

    fn get_reference_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_node_iterator_get_reference_node(self.to_glib_none().0))
        }
    }

    fn get_root(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_node_iterator_get_root(self.to_glib_none().0))
        }
    }

    fn get_what_to_show(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_node_iterator_get_what_to_show(self.to_glib_none().0)
        }
    }

    fn next_node(&self) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_node_iterator_next_node(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn previous_node(&self) -> Result<DOMNode, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_node_iterator_previous_node(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}
