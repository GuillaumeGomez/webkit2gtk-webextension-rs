// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMEventTarget;
use DOMNamedNodeMap;
use DOMNode;
use DOMObject;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMDocumentType(Object<ffi::WebKitDOMDocumentType, ffi::WebKitDOMDocumentTypeClass>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_type_get_type(),
    }
}

pub trait DOMDocumentTypeExt {
    fn get_entities(&self) -> Option<DOMNamedNodeMap>;

    fn get_internal_subset(&self) -> Option<String>;

    fn get_name(&self) -> Option<String>;

    fn get_notations(&self) -> Option<DOMNamedNodeMap>;

    fn get_public_id(&self) -> Option<String>;

    fn get_system_id(&self) -> Option<String>;

    fn connect_property_entities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_internal_subset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_notations_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_public_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_system_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDocumentType> + IsA<glib::object::Object>> DOMDocumentTypeExt for O {
    fn get_entities(&self) -> Option<DOMNamedNodeMap> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_entities(self.to_glib_none().0))
        }
    }

    fn get_internal_subset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_internal_subset(self.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_name(self.to_glib_none().0))
        }
    }

    fn get_notations(&self) -> Option<DOMNamedNodeMap> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_notations(self.to_glib_none().0))
        }
    }

    fn get_public_id(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_public_id(self.to_glib_none().0))
        }
    }

    fn get_system_id(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_type_get_system_id(self.to_glib_none().0))
        }
    }

    fn connect_property_entities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::entities",
                transmute(notify_entities_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_internal_subset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::internal-subset",
                transmute(notify_internal_subset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::name",
                transmute(notify_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_notations_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::notations",
                transmute(notify_notations_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_public_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::public-id",
                transmute(notify_public_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_system_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::system-id",
                transmute(notify_system_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_entities_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_internal_subset_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_name_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_notations_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_public_id_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_system_id_trampoline<P>(this: *mut ffi::WebKitDOMDocumentType, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDocumentType> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDocumentType::from_glib_borrow(this).downcast_unchecked())
}
