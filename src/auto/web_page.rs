// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

#[cfg(feature = "v2_12")]
use ConsoleMessage;
#[cfg(feature = "v2_8")]
use ContextMenu;
use DOMDocument;
#[cfg(feature = "v2_2")]
use Frame;
use URIRequest;
use URIResponse;
#[cfg(feature = "v2_10")]
use WebEditor;
#[cfg(feature = "v2_8")]
use WebHitTestResult;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebPage(Object<ffi::WebKitWebPage>);

    match fn {
        get_type => || ffi::webkit_web_page_get_type(),
    }
}

impl WebPage {
    pub fn get_dom_document(&self) -> Option<DOMDocument> {
        unsafe {
            from_glib_none(ffi::webkit_web_page_get_dom_document(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_10")]
    pub fn get_editor(&self) -> Option<WebEditor> {
        unsafe {
            from_glib_none(ffi::webkit_web_page_get_editor(self.to_glib_none().0))
        }
    }

    pub fn get_id(&self) -> u64 {
        unsafe {
            ffi::webkit_web_page_get_id(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_2")]
    pub fn get_main_frame(&self) -> Option<Frame> {
        unsafe {
            from_glib_none(ffi::webkit_web_page_get_main_frame(self.to_glib_none().0))
        }
    }

    pub fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_page_get_uri(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    pub fn connect_console_message_sent<F: Fn(&WebPage, &ConsoleMessage) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebPage, &ConsoleMessage) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "console-message-sent",
                transmute(console_message_sent_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn connect_context_menu<F: Fn(&WebPage, &ContextMenu, &WebHitTestResult) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebPage, &ContextMenu, &WebHitTestResult) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "context-menu",
                transmute(context_menu_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_document_loaded<F: Fn(&WebPage) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebPage) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "document-loaded",
                transmute(document_loaded_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //#[cfg(feature = "v2_16")]
    //pub fn connect_form_controls_associated<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Empty ctype elements: *.PtrArray TypeId { ns_id: 1, id: 12 }
    //}

    pub fn connect_send_request<F: Fn(&WebPage, &URIRequest, &Option<URIResponse>) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebPage, &URIRequest, &Option<URIResponse>) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "send-request",
                transmute(send_request_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v2_12")]
unsafe extern "C" fn console_message_sent_trampoline(this: *mut ffi::WebKitWebPage, console_message: *mut ffi::WebKitConsoleMessage, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebPage, &ConsoleMessage) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(console_message))
}

#[cfg(feature = "v2_8")]
unsafe extern "C" fn context_menu_trampoline(this: *mut ffi::WebKitWebPage, context_menu: *mut ffi::WebKitContextMenu, hit_test_result: *mut ffi::WebKitWebHitTestResult, f: glib_ffi::gpointer) -> glib_ffi::gboolean {
    callback_guard!();
    let f: &Box_<Fn(&WebPage, &ContextMenu, &WebHitTestResult) -> bool + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(context_menu), &from_glib_none(hit_test_result)).to_glib()
}

unsafe extern "C" fn document_loaded_trampoline(this: *mut ffi::WebKitWebPage, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebPage) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn send_request_trampoline(this: *mut ffi::WebKitWebPage, request: *mut ffi::WebKitURIRequest, redirected_response: *mut ffi::WebKitURIResponse, f: glib_ffi::gpointer) -> glib_ffi::gboolean {
    callback_guard!();
    let f: &Box_<Fn(&WebPage, &URIRequest, &Option<URIResponse>) -> bool + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(request), &from_glib_none(redirected_response)).to_glib()
}
