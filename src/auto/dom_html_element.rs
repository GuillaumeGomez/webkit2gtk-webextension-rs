// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
use DOMObject;
use Error;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMHTMLElement(Object<ffi::WebKitDOMHTMLElement, ffi::WebKitDOMHTMLElementClass>): DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_element_get_type(),
    }
}

pub trait DOMHTMLElementExt {
    fn click(&self);

    fn get_access_key(&self) -> Option<String>;

    #[cfg(any(not(feature = "v2_10"), feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    fn get_content_editable(&self) -> Option<String>;

    fn get_dir(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_draggable(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool;

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_inner_html(&self) -> Option<String>;

    fn get_inner_text(&self) -> Option<String>;

    fn get_is_content_editable(&self) -> bool;

    fn get_lang(&self) -> Option<String>;

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_outer_html(&self) -> Option<String>;

    fn get_outer_text(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_spellcheck(&self) -> bool;

    fn get_tab_index(&self) -> libc::c_long;

    fn get_title(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_translate(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkitdropzone(&self) -> Option<String>;

    fn set_access_key(&self, value: &str);

    fn set_content_editable(&self, value: &str) -> Result<(), Error>;

    fn set_dir(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_draggable(&self, value: bool);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hidden(&self, value: bool);

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), Error>;

    fn set_inner_text(&self, value: &str) -> Result<(), Error>;

    fn set_lang(&self, value: &str);

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), Error>;

    fn set_outer_text(&self, value: &str) -> Result<(), Error>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_spellcheck(&self, value: bool);

    fn set_tab_index(&self, value: libc::c_long);

    fn set_title(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_translate(&self, value: bool);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_webkitdropzone(&self, value: &str);

    fn get_property_draggable(&self) -> bool;

    fn set_property_draggable(&self, draggable: bool);

    fn get_property_hidden(&self) -> bool;

    fn set_property_hidden(&self, hidden: bool);

    fn get_property_spellcheck(&self) -> bool;

    fn set_property_spellcheck(&self, spellcheck: bool);

    fn get_property_translate(&self) -> bool;

    fn set_property_translate(&self, translate: bool);

    fn get_property_webkitdropzone(&self) -> Option<String>;

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>);

    fn connect_property_access_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_draggable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_inner_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_lang_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_outer_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_spellcheck_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tab_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_translate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_webkitdropzone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLElement> + IsA<glib::object::Object>> DOMHTMLElementExt for O {
    fn click(&self) {
        unsafe {
            ffi::webkit_dom_html_element_click(self.to_glib_none().0);
        }
    }

    fn get_access_key(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_access_key(self.to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_10"), feature = "dox"))]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_children(self.to_glib_none().0))
        }
    }

    fn get_content_editable(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_content_editable(self.to_glib_none().0))
        }
    }

    fn get_dir(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_dir(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_draggable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_draggable(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_hidden(self.to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_inner_html(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_inner_html(self.to_glib_none().0))
        }
    }

    fn get_inner_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_inner_text(self.to_glib_none().0))
        }
    }

    fn get_is_content_editable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_is_content_editable(self.to_glib_none().0))
        }
    }

    fn get_lang(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_lang(self.to_glib_none().0))
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn get_outer_html(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_outer_html(self.to_glib_none().0))
        }
    }

    fn get_outer_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_outer_text(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_spellcheck(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_spellcheck(self.to_glib_none().0))
        }
    }

    fn get_tab_index(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_element_get_tab_index(self.to_glib_none().0)
        }
    }

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_title(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_translate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_translate(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_webkitdropzone(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_webkitdropzone(self.to_glib_none().0))
        }
    }

    fn set_access_key(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_access_key(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_content_editable(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_content_editable(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_dir(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_dir(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_draggable(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_draggable(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hidden(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_hidden(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_inner_html(self.to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_inner_text(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_inner_text(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_lang(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_lang(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(not(feature = "v2_8"), feature = "dox"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_outer_html(self.to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_outer_text(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_outer_text(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_spellcheck(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_spellcheck(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_tab_index(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_element_set_tab_index(self.to_glib_none().0, value);
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_title(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_translate(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_translate(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_webkitdropzone(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_webkitdropzone(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn get_property_draggable(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "draggable".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_draggable(&self, draggable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "draggable".to_glib_none().0, Value::from(&draggable).to_glib_none().0);
        }
    }

    fn get_property_hidden(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hidden".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_hidden(&self, hidden: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hidden".to_glib_none().0, Value::from(&hidden).to_glib_none().0);
        }
    }

    fn get_property_spellcheck(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "spellcheck".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_spellcheck(&self, spellcheck: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "spellcheck".to_glib_none().0, Value::from(&spellcheck).to_glib_none().0);
        }
    }

    fn get_property_translate(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "translate".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_translate(&self, translate: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "translate".to_glib_none().0, Value::from(&translate).to_glib_none().0);
        }
    }

    fn get_property_webkitdropzone(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkitdropzone".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "webkitdropzone".to_glib_none().0, Value::from(webkitdropzone).to_glib_none().0);
        }
    }

    fn connect_property_access_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::access-key",
                transmute(notify_access_key_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::content-editable",
                transmute(notify_content_editable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_dir_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dir",
                transmute(notify_dir_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_draggable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::draggable",
                transmute(notify_draggable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::hidden",
                transmute(notify_hidden_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_inner_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::inner-text",
                transmute(notify_inner_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_is_content_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-content-editable",
                transmute(notify_is_content_editable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_lang_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::lang",
                transmute(notify_lang_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_outer_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::outer-text",
                transmute(notify_outer_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_spellcheck_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::spellcheck",
                transmute(notify_spellcheck_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_tab_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::tab-index",
                transmute(notify_tab_index_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::title",
                transmute(notify_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_translate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::translate",
                transmute(notify_translate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_webkitdropzone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::webkitdropzone",
                transmute(notify_webkitdropzone_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_access_key_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_content_editable_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dir_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_draggable_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hidden_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_inner_text_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_is_content_editable_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_lang_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_outer_text_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_spellcheck_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_tab_index_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_title_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_translate_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_webkitdropzone_trampoline<P>(this: *mut ffi::WebKitDOMHTMLElement, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMHTMLElement> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMHTMLElement::from_glib_borrow(this).downcast_unchecked())
}
