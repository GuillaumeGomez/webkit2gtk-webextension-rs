// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
use DOMObject;
use Error;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use libc;
use std::ptr;

glib_wrapper! {
    pub struct DOMHTMLElement(Object<ffi::WebKitDOMHTMLElement>): DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_element_get_type(),
    }
}

pub trait DOMHTMLElementExt {
    fn click(&self);

    fn get_access_key(&self) -> Option<String>;

    #[cfg(not(feature = "v2_10"))]
    fn get_children(&self) -> Option<DOMHTMLCollection>;

    fn get_content_editable(&self) -> Option<String>;

    fn get_dir(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_draggable(&self) -> bool;

    #[cfg(feature = "v2_16")]
    fn get_hidden(&self) -> bool;

    #[cfg(not(feature = "v2_8"))]
    fn get_inner_html(&self) -> Option<String>;

    fn get_inner_text(&self) -> Option<String>;

    fn get_is_content_editable(&self) -> bool;

    fn get_lang(&self) -> Option<String>;

    #[cfg(not(feature = "v2_8"))]
    fn get_outer_html(&self) -> Option<String>;

    fn get_outer_text(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_spellcheck(&self) -> bool;

    fn get_tab_index(&self) -> libc::c_long;

    fn get_title(&self) -> Option<String>;

    #[cfg(feature = "v2_16")]
    fn get_translate(&self) -> bool;

    #[cfg(feature = "v2_16")]
    fn get_webkitdropzone(&self) -> Option<String>;

    fn set_access_key(&self, value: &str);

    fn set_content_editable(&self, value: &str) -> Result<(), Error>;

    fn set_dir(&self, value: &str);

    #[cfg(feature = "v2_16")]
    fn set_draggable(&self, value: bool);

    #[cfg(feature = "v2_16")]
    fn set_hidden(&self, value: bool);

    #[cfg(not(feature = "v2_8"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), Error>;

    fn set_inner_text(&self, value: &str) -> Result<(), Error>;

    fn set_lang(&self, value: &str);

    #[cfg(not(feature = "v2_8"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), Error>;

    fn set_outer_text(&self, value: &str) -> Result<(), Error>;

    #[cfg(feature = "v2_16")]
    fn set_spellcheck(&self, value: bool);

    fn set_tab_index(&self, value: libc::c_long);

    fn set_title(&self, value: &str);

    #[cfg(feature = "v2_16")]
    fn set_translate(&self, value: bool);

    #[cfg(feature = "v2_16")]
    fn set_webkitdropzone(&self, value: &str);

    fn get_property_draggable(&self) -> bool;

    fn set_property_draggable(&self, draggable: bool);

    fn get_property_hidden(&self) -> bool;

    fn set_property_hidden(&self, hidden: bool);

    fn get_property_spellcheck(&self) -> bool;

    fn set_property_spellcheck(&self, spellcheck: bool);

    fn get_property_translate(&self) -> bool;

    fn set_property_translate(&self, translate: bool);

    fn get_property_webkitdropzone(&self) -> Option<String>;

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>);
}

impl<O: IsA<DOMHTMLElement> + IsA<glib::object::Object>> DOMHTMLElementExt for O {
    fn click(&self) {
        unsafe {
            ffi::webkit_dom_html_element_click(self.to_glib_none().0);
        }
    }

    fn get_access_key(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_access_key(self.to_glib_none().0))
        }
    }

    #[cfg(not(feature = "v2_10"))]
    fn get_children(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_children(self.to_glib_none().0))
        }
    }

    fn get_content_editable(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_content_editable(self.to_glib_none().0))
        }
    }

    fn get_dir(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_dir(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_draggable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_draggable(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_hidden(self.to_glib_none().0))
        }
    }

    #[cfg(not(feature = "v2_8"))]
    fn get_inner_html(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_inner_html(self.to_glib_none().0))
        }
    }

    fn get_inner_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_inner_text(self.to_glib_none().0))
        }
    }

    fn get_is_content_editable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_is_content_editable(self.to_glib_none().0))
        }
    }

    fn get_lang(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_lang(self.to_glib_none().0))
        }
    }

    #[cfg(not(feature = "v2_8"))]
    fn get_outer_html(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_outer_html(self.to_glib_none().0))
        }
    }

    fn get_outer_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_outer_text(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_spellcheck(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_spellcheck(self.to_glib_none().0))
        }
    }

    fn get_tab_index(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_element_get_tab_index(self.to_glib_none().0)
        }
    }

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_title(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_translate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_element_get_translate(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_webkitdropzone(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_element_get_webkitdropzone(self.to_glib_none().0))
        }
    }

    fn set_access_key(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_access_key(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_content_editable(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_content_editable(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_dir(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_dir(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_draggable(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_draggable(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_hidden(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_hidden(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(not(feature = "v2_8"))]
    fn set_inner_html(&self, contents: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_inner_html(self.to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_inner_text(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_inner_text(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_lang(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_lang(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(not(feature = "v2_8"))]
    fn set_outer_html(&self, contents: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_outer_html(self.to_glib_none().0, contents.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_outer_text(&self, value: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_element_set_outer_text(self.to_glib_none().0, value.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_spellcheck(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_spellcheck(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_tab_index(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_element_set_tab_index(self.to_glib_none().0, value);
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_title(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_translate(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_element_set_translate(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(feature = "v2_16")]
    fn set_webkitdropzone(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_element_set_webkitdropzone(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn get_property_draggable(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "draggable".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_draggable(&self, draggable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "draggable".to_glib_none().0, Value::from(&draggable).to_glib_none().0);
        }
    }

    fn get_property_hidden(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hidden".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_hidden(&self, hidden: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hidden".to_glib_none().0, Value::from(&hidden).to_glib_none().0);
        }
    }

    fn get_property_spellcheck(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "spellcheck".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_spellcheck(&self, spellcheck: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "spellcheck".to_glib_none().0, Value::from(&spellcheck).to_glib_none().0);
        }
    }

    fn get_property_translate(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "translate".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_translate(&self, translate: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "translate".to_glib_none().0, Value::from(&translate).to_glib_none().0);
        }
    }

    fn get_property_webkitdropzone(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "webkitdropzone".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_webkitdropzone(&self, webkitdropzone: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "webkitdropzone".to_glib_none().0, Value::from(webkitdropzone).to_glib_none().0);
        }
    }
}
