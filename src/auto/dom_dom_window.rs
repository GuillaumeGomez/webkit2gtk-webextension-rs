// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

#[cfg(any(feature = "v2_16", feature = "dox"))]
use DOMCSSStyleDeclaration;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use DOMDOMSelection;
use DOMDocument;
use DOMElement;
use DOMEventTarget;
use DOMObject;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMDOMWindow(Object<ffi::WebKitDOMDOMWindow, ffi::WebKitDOMDOMWindowClass>): DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_dom_window_get_type(),
    }
}

pub trait DOMDOMWindowExt {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn alert(&self, message: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn blur(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn capture_events(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn close(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn confirm(&self, message: &str) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn find(&self, string: &str, caseSensitive: bool, backwards: bool, wrap: bool, wholeWord: bool, searchInFrames: bool, showDialog: bool) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn focus(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_closed(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_computed_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_default_status(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_device_pixel_ratio(&self) -> f64;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_document(&self) -> Option<DOMDocument>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_frame_element(&self) -> Option<DOMElement>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_frames(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_inner_height(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_inner_width(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_length(&self) -> libc::c_ulong;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_name(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_offscreen_buffering(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_opener(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_orientation(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_outer_height(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_outer_width(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_page_x_offset(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_page_y_offset(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_parent(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_left(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_top(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_x(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_y(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scroll_x(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scroll_y(&self) -> libc::c_long;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_selection(&self) -> Option<DOMDOMSelection>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_self(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_status(&self) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_top(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_window(&self) -> Option<DOMDOMWindow>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn move_by(&self, x: f32, y: f32);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn move_to(&self, x: f32, y: f32);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn print(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn prompt(&self, message: &str, defaultValue: &str) -> Option<String>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn release_events(&self);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn resize_by(&self, x: f32, y: f32);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn resize_to(&self, width: f32, height: f32);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn scroll_by(&self, x: f64, y: f64);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn scroll_to(&self, x: f64, y: f64);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_default_status(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_name(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_status(&self, value: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn stop(&self);

    fn webkit_message_handlers_post_message(&self, handler: &str, message: &str) -> bool;

    fn get_property_closed(&self) -> bool;

    fn get_property_default_status(&self) -> Option<String>;

    fn set_property_default_status(&self, default_status: Option<&str>);

    fn get_property_device_pixel_ratio(&self) -> f64;

    fn get_property_document(&self) -> Option<DOMDocument>;

    fn get_property_frame_element(&self) -> Option<DOMElement>;

    fn get_property_frames(&self) -> Option<DOMDOMWindow>;

    fn get_property_inner_height(&self) -> libc::c_long;

    fn get_property_inner_width(&self) -> libc::c_long;

    fn get_property_length(&self) -> libc::c_ulong;

    fn get_property_name(&self) -> Option<String>;

    fn set_property_name(&self, name: Option<&str>);

    fn get_property_offscreen_buffering(&self) -> bool;

    fn get_property_opener(&self) -> Option<DOMDOMWindow>;

    fn get_property_orientation(&self) -> libc::c_long;

    fn get_property_outer_height(&self) -> libc::c_long;

    fn get_property_outer_width(&self) -> libc::c_long;

    fn get_property_page_x_offset(&self) -> libc::c_long;

    fn get_property_page_y_offset(&self) -> libc::c_long;

    fn get_property_parent(&self) -> Option<DOMDOMWindow>;

    fn get_property_screen_left(&self) -> libc::c_long;

    fn get_property_screen_top(&self) -> libc::c_long;

    fn get_property_screen_x(&self) -> libc::c_long;

    fn get_property_screen_y(&self) -> libc::c_long;

    fn get_property_scroll_x(&self) -> libc::c_long;

    fn get_property_scroll_y(&self) -> libc::c_long;

    fn get_property_self(&self) -> Option<DOMDOMWindow>;

    fn get_property_status(&self) -> Option<String>;

    fn set_property_status(&self, status: Option<&str>);

    fn get_property_top(&self) -> Option<DOMDOMWindow>;

    fn get_property_window(&self) -> Option<DOMDOMWindow>;

    fn connect_property_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_device_pixel_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_document_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_frame_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_frames_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_inner_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_inner_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_offscreen_buffering_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_opener_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_outer_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_outer_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_page_x_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_page_y_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_screen_left_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_screen_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_screen_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_screen_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scroll_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scroll_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_self_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDOMWindow> + IsA<glib::object::Object>> DOMDOMWindowExt for O {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn alert(&self, message: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_alert(self.to_glib_none().0, message.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn blur(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_blur(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn capture_events(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_capture_events(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn close(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_close(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn confirm(&self, message: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_confirm(self.to_glib_none().0, message.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn find(&self, string: &str, caseSensitive: bool, backwards: bool, wrap: bool, wholeWord: bool, searchInFrames: bool, showDialog: bool) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_find(self.to_glib_none().0, string.to_glib_none().0, caseSensitive.to_glib(), backwards.to_glib(), wrap.to_glib(), wholeWord.to_glib(), searchInFrames.to_glib(), showDialog.to_glib()))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn focus(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_focus(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_closed(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_get_closed(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_computed_style<'a, P: IsA<DOMElement>, Q: Into<Option<&'a str>>>(&self, element: &P, pseudoElement: Q) -> Option<DOMCSSStyleDeclaration> {
        let pseudoElement = pseudoElement.into();
        let pseudoElement = pseudoElement.to_glib_none();
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_computed_style(self.to_glib_none().0, element.to_glib_none().0, pseudoElement.0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_default_status(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_default_status(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_device_pixel_ratio(&self) -> f64 {
        unsafe {
            ffi::webkit_dom_dom_window_get_device_pixel_ratio(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_document(&self) -> Option<DOMDocument> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_window_get_document(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_frame_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_window_get_frame_element(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_frames(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_frames(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_inner_height(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_inner_height(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_inner_width(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_inner_width(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_length(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_window_get_length(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_name(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_offscreen_buffering(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_get_offscreen_buffering(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_opener(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_opener(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_orientation(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_orientation(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_outer_height(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_outer_height(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_outer_width(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_outer_width(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_page_x_offset(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_page_x_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_page_y_offset(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_page_y_offset(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_parent(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_parent(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_left(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_left(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_top(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_top(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_x(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_screen_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_y(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scroll_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_scroll_x(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_scroll_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_scroll_y(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_selection(&self) -> Option<DOMDOMSelection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_selection(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_self(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_self(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_status(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_status(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_top(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_top(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_window(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_window(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn move_by(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_move_by(self.to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn move_to(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_move_to(self.to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn print(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_print(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn prompt(&self, message: &str, defaultValue: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_prompt(self.to_glib_none().0, message.to_glib_none().0, defaultValue.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn release_events(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_release_events(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn resize_by(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_resize_by(self.to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn resize_to(&self, width: f32, height: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_resize_to(self.to_glib_none().0, width, height);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn scroll_by(&self, x: f64, y: f64) {
        unsafe {
            ffi::webkit_dom_dom_window_scroll_by(self.to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn scroll_to(&self, x: f64, y: f64) {
        unsafe {
            ffi::webkit_dom_dom_window_scroll_to(self.to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_default_status(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_default_status(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_name(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_status(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_status(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn stop(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_stop(self.to_glib_none().0);
        }
    }

    fn webkit_message_handlers_post_message(&self, handler: &str, message: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_webkit_message_handlers_post_message(self.to_glib_none().0, handler.to_glib_none().0, message.to_glib_none().0))
        }
    }

    fn get_property_closed(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "closed".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_default_status(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "default-status".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_default_status(&self, default_status: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "default-status".to_glib_none().0, Value::from(default_status).to_glib_none().0);
        }
    }

    fn get_property_device_pixel_ratio(&self) -> f64 {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <f64 as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "device-pixel-ratio".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_document(&self) -> Option<DOMDocument> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDocument as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "document".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_frame_element(&self) -> Option<DOMElement> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMElement as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "frame-element".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_frames(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "frames".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_inner_height(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "inner-height".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_inner_width(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "inner-width".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_length(&self) -> libc::c_ulong {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_ulong as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "length".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_name(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "name".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_name(&self, name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "name".to_glib_none().0, Value::from(name).to_glib_none().0);
        }
    }

    fn get_property_offscreen_buffering(&self) -> bool {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <bool as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "offscreen-buffering".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_opener(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "opener".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_orientation(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "orientation".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_outer_height(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "outer-height".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_outer_width(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "outer-width".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_page_x_offset(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "page-x-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_page_y_offset(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "page-y-offset".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_parent(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "parent".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_screen_left(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "screen-left".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_screen_top(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "screen-top".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_screen_x(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "screen-x".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_screen_y(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "screen-y".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_scroll_x(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scroll-x".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_scroll_y(&self) -> libc::c_long {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <libc::c_long as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scroll-y".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_self(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "self".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_status(&self) -> Option<String> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <String as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "status".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_status(&self, status: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "status".to_glib_none().0, Value::from(status).to_glib_none().0);
        }
    }

    fn get_property_top(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "top".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_window(&self) -> Option<DOMDOMWindow> {
        unsafe {
            let mut value = Value::uninitialized();
            gobject_ffi::g_value_init(value.to_glib_none_mut().0, <DOMDOMWindow as StaticType>::static_type().to_glib());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "window".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_property_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::closed",
                transmute(notify_closed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_default_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::default-status",
                transmute(notify_default_status_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_device_pixel_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::device-pixel-ratio",
                transmute(notify_device_pixel_ratio_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_document_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::document",
                transmute(notify_document_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_frame_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::frame-element",
                transmute(notify_frame_element_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_frames_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::frames",
                transmute(notify_frames_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_inner_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::inner-height",
                transmute(notify_inner_height_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_inner_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::inner-width",
                transmute(notify_inner_width_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::length",
                transmute(notify_length_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::name",
                transmute(notify_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_offscreen_buffering_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::offscreen-buffering",
                transmute(notify_offscreen_buffering_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_opener_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::opener",
                transmute(notify_opener_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::orientation",
                transmute(notify_orientation_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_outer_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::outer-height",
                transmute(notify_outer_height_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_outer_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::outer-width",
                transmute(notify_outer_width_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_page_x_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::page-x-offset",
                transmute(notify_page_x_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_page_y_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::page-y-offset",
                transmute(notify_page_y_offset_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_screen_left_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::screen-left",
                transmute(notify_screen_left_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_screen_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::screen-top",
                transmute(notify_screen_top_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_screen_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::screen-x",
                transmute(notify_screen_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_screen_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::screen-y",
                transmute(notify_screen_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_scroll_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::scroll-x",
                transmute(notify_scroll_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_scroll_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::scroll-y",
                transmute(notify_scroll_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_self_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::self",
                transmute(notify_self_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::status",
                transmute(notify_status_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::top",
                transmute(notify_top_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::window",
                transmute(notify_window_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_closed_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_default_status_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_device_pixel_ratio_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_document_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_frame_element_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_frames_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_inner_height_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_inner_width_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_length_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_name_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_offscreen_buffering_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_opener_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_orientation_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_outer_height_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_outer_width_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_page_x_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_page_y_offset_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_screen_left_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_screen_top_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_screen_x_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_screen_y_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_scroll_x_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_scroll_y_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_self_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_status_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_top_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_window_trampoline<P>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMDOMWindow> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMDOMWindow::from_glib_borrow(this).downcast_unchecked())
}
