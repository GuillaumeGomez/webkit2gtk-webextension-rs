// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::translate::*;
use libc;

glib_wrapper! {
    pub struct DOMHTMLAppletElement(Object<ffi::WebKitDOMHTMLAppletElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_applet_element_get_type(),
    }
}

impl DOMHTMLAppletElement {
    pub fn get_align(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_align(self.to_glib_none().0))
        }
    }

    pub fn get_alt(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_alt(self.to_glib_none().0))
        }
    }

    pub fn get_archive(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_archive(self.to_glib_none().0))
        }
    }

    pub fn get_code(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_code(self.to_glib_none().0))
        }
    }

    pub fn get_code_base(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_code_base(self.to_glib_none().0))
        }
    }

    pub fn get_height(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_height(self.to_glib_none().0))
        }
    }

    pub fn get_hspace(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_applet_element_get_hspace(self.to_glib_none().0)
        }
    }

    pub fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_name(self.to_glib_none().0))
        }
    }

    pub fn get_object(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_object(self.to_glib_none().0))
        }
    }

    pub fn get_vspace(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_applet_element_get_vspace(self.to_glib_none().0)
        }
    }

    pub fn get_width(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_applet_element_get_width(self.to_glib_none().0))
        }
    }

    pub fn set_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_align(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_alt(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_alt(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_archive(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_archive(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_code(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_code(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_code_base(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_code_base(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_height(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_height(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_hspace(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_hspace(self.to_glib_none().0, value);
        }
    }

    pub fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_name(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_object(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_object(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_vspace(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_vspace(self.to_glib_none().0, value);
        }
    }

    pub fn set_width(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_applet_element_set_width(self.to_glib_none().0, value.to_glib_none().0);
        }
    }
}
