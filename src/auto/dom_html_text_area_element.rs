// This file was generated by gir (3c73dd9) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMHTMLFormElement;
use DOMNode;
use DOMObject;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use libc;

glib_wrapper! {
    pub struct DOMHTMLTextAreaElement(Object<ffi::WebKitDOMHTMLTextAreaElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_text_area_element_get_type(),
    }
}

pub trait DOMHTMLTextAreaElementExt {
    fn get_area_type(&self) -> Option<String>;

    fn get_autofocus(&self) -> bool;

    fn get_cols(&self) -> libc::c_long;

    fn get_default_value(&self) -> Option<String>;

    fn get_disabled(&self) -> bool;

    fn get_form(&self) -> Option<DOMHTMLFormElement>;

    fn get_name(&self) -> Option<String>;

    fn get_read_only(&self) -> bool;

    fn get_rows(&self) -> libc::c_long;

    fn get_selection_end(&self) -> libc::c_long;

    fn get_selection_start(&self) -> libc::c_long;

    fn get_value(&self) -> Option<String>;

    fn get_will_validate(&self) -> bool;

    fn is_edited(&self) -> bool;

    fn select(&self);

    fn set_autofocus(&self, value: bool);

    fn set_cols(&self, value: libc::c_long);

    fn set_default_value(&self, value: &str);

    fn set_disabled(&self, value: bool);

    fn set_name(&self, value: &str);

    fn set_read_only(&self, value: bool);

    fn set_rows(&self, value: libc::c_long);

    fn set_selection_end(&self, value: libc::c_long);

    fn set_selection_range(&self, start: libc::c_long, end: libc::c_long, direction: &str);

    fn set_selection_start(&self, value: libc::c_long);

    fn set_value(&self, value: &str);

    fn get_property_type(&self) -> Option<String>;
}

impl<O: IsA<DOMHTMLTextAreaElement> + IsA<glib::object::Object>> DOMHTMLTextAreaElementExt for O {
    fn get_area_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_area_type(self.to_glib_none().0))
        }
    }

    fn get_autofocus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_autofocus(self.to_glib_none().0))
        }
    }

    fn get_cols(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_cols(self.to_glib_none().0)
        }
    }

    fn get_default_value(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_default_value(self.to_glib_none().0))
        }
    }

    fn get_disabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_disabled(self.to_glib_none().0))
        }
    }

    fn get_form(&self) -> Option<DOMHTMLFormElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_text_area_element_get_form(self.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_name(self.to_glib_none().0))
        }
    }

    fn get_read_only(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_read_only(self.to_glib_none().0))
        }
    }

    fn get_rows(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_rows(self.to_glib_none().0)
        }
    }

    fn get_selection_end(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_selection_end(self.to_glib_none().0)
        }
    }

    fn get_selection_start(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_selection_start(self.to_glib_none().0)
        }
    }

    fn get_value(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_value(self.to_glib_none().0))
        }
    }

    fn get_will_validate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_will_validate(self.to_glib_none().0))
        }
    }

    fn is_edited(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_is_edited(self.to_glib_none().0))
        }
    }

    fn select(&self) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_select(self.to_glib_none().0);
        }
    }

    fn set_autofocus(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_autofocus(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_cols(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_cols(self.to_glib_none().0, value);
        }
    }

    fn set_default_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_default_value(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_disabled(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_disabled(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_name(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_read_only(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_read_only(self.to_glib_none().0, value.to_glib());
        }
    }

    fn set_rows(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_rows(self.to_glib_none().0, value);
        }
    }

    fn set_selection_end(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_end(self.to_glib_none().0, value);
        }
    }

    fn set_selection_range(&self, start: libc::c_long, end: libc::c_long, direction: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_range(self.to_glib_none().0, start, end, direction.to_glib_none().0);
        }
    }

    fn set_selection_start(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_start(self.to_glib_none().0, value);
        }
    }

    fn set_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_value(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }
}
