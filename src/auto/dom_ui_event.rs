// This file was generated by gir (d50d839) from gir-files (469db10)
// DO NOT EDIT

use DOMDOMWindow;
use DOMEvent;
use DOMObject;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DOMUIEvent(Object<ffi::WebKitDOMUIEvent, ffi::WebKitDOMUIEventClass>): DOMEvent, DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_ui_event_get_type(),
    }
}

pub trait DOMUIEventExt {
    fn get_char_code(&self) -> libc::c_long;

    fn get_detail(&self) -> libc::c_long;

    fn get_key_code(&self) -> libc::c_long;

    fn get_layer_x(&self) -> libc::c_long;

    fn get_layer_y(&self) -> libc::c_long;

    fn get_page_x(&self) -> libc::c_long;

    fn get_page_y(&self) -> libc::c_long;

    fn get_view(&self) -> Option<DOMDOMWindow>;

    fn init_ui_event(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: libc::c_long);

    fn connect_property_char_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_detail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_key_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_layer_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_layer_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_page_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_page_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMUIEvent> + IsA<glib::object::Object>> DOMUIEventExt for O {
    fn get_char_code(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_char_code(self.to_glib_none().0)
        }
    }

    fn get_detail(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_detail(self.to_glib_none().0)
        }
    }

    fn get_key_code(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_key_code(self.to_glib_none().0)
        }
    }

    fn get_layer_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_layer_x(self.to_glib_none().0)
        }
    }

    fn get_layer_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_layer_y(self.to_glib_none().0)
        }
    }

    fn get_page_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_page_x(self.to_glib_none().0)
        }
    }

    fn get_page_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_ui_event_get_page_y(self.to_glib_none().0)
        }
    }

    fn get_view(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_ui_event_get_view(self.to_glib_none().0))
        }
    }

    fn init_ui_event(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: libc::c_long) {
        unsafe {
            ffi::webkit_dom_ui_event_init_ui_event(self.to_glib_none().0, type_.to_glib_none().0, canBubble.to_glib(), cancelable.to_glib(), view.to_glib_none().0, detail);
        }
    }

    fn connect_property_char_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::char-code",
                transmute(notify_char_code_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_detail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::detail",
                transmute(notify_detail_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_key_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::key-code",
                transmute(notify_key_code_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_layer_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::layer-x",
                transmute(notify_layer_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_layer_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::layer-y",
                transmute(notify_layer_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_page_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::page-x",
                transmute(notify_page_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_page_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::page-y",
                transmute(notify_page_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::view",
                transmute(notify_view_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_char_code_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_detail_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_key_code_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_layer_x_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_layer_y_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_page_x_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_page_y_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_view_trampoline<P>(this: *mut ffi::WebKitDOMUIEvent, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DOMUIEvent> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DOMUIEvent::from_glib_borrow(this).downcast_unchecked())
}
